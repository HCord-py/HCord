
msgid ""
msgstr ""
"Project-Id-Version:  discordpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-23 22:41-0400\n"
"PO-Revision-Date: 2020-10-24 02:41+0000\n"
"Last-Translator: \n"
"Language: ja_JP\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../ext/commands/api.rst:4
msgid "API Reference"
msgstr "APIリファレンス"

#: ../../ext/commands/api.rst:6
msgid ""
"The following section outlines the API of hcord.py's command extension "
"module."
msgstr "この項目ではhcord.pyのAPIが持つコマンド拡張モジュールについて解説します。"

#: ../../ext/commands/api.rst:11
msgid "Bot"
msgstr "Bot"

#: hcord.ext.commands.Bot:1 of
msgid "Represents a discord bot."
msgstr "Discord Botを表します。"

#: hcord.ext.commands.Bot:3 of
msgid ""
"This class is a subclass of :class:`hcord.Client` and as a result "
"anything that you can do with a :class:`hcord.Client` you can do with "
"this bot."
msgstr ""
"このクラスは :class:`hcord.Client` のサブクラスのため、 :class:`hcord.Client` "
"でできることと同じことをこのBotで行うことができます。"

#: hcord.ext.commands.Bot:7 of
msgid ""
"This class also subclasses :class:`.GroupMixin` to provide the "
"functionality to manage commands."
msgstr "また、 :class:`.GroupMixin` も継承しており、コマンド管理の機能も使用可能です。"

#: hcord.ext.commands.Bot:12 of
msgid ""
"The command prefix is what the message content must contain initially to "
"have a command invoked. This prefix could either be a string to indicate "
"what the prefix should be, or a callable that takes in the bot as its "
"first parameter and :class:`hcord.Message` as its second parameter and "
"returns the prefix. This is to facilitate \"dynamic\" command prefixes. "
"This callable can be either a regular function or a coroutine."
msgstr ""
"コマンドの接頭詞とは、コマンドの判定のためにメッセージの先頭に付けなければならないものです。接頭詞には、そのまま接頭詞として使用する文字列、または"
" :class:`hcord.Message` "
"を二つ目の引数として受け取り、接頭詞を返す呼び出し可能な関数を渡すことができます。これは「動的な」接頭詞の実装を容易にするためです。"

#: hcord.ext.commands.Bot:20 of
msgid ""
"An empty string as the prefix always matches, enabling prefix-less "
"command invocation. While this may be useful in DMs it should be avoided "
"in servers, as it's likely to cause performance issues and unintended "
"command invocations."
msgstr "接頭詞に空文字列を渡せば、接頭詞なしでコマンドの呼び出しができます。これはDM上では有用ですが、サーバーでは意図せずコマンドを呼び出してしまうことに繋がるため、避けるべきです。"

#: hcord.ext.commands.Bot:25 of
msgid ""
"The command prefix could also be an iterable of strings indicating that "
"multiple checks for the prefix should be used and the first one to match "
"will be the invocation prefix. You can get this prefix via "
":attr:`.Context.prefix`. To avoid confusion empty iterables are not "
"allowed."
msgstr ""
"接頭詞は複数設定することもできます。複数の接頭詞がイテラブルで渡された場合、メッセージと最初に一致するものが接頭詞として使用されます。この接頭詞は"
" :attr:`.Context.prefix` で取得することができます。また、空のイテラブルオブジェクトは使用できません。"

#: hcord.ext.commands.Bot:33 of
msgid ""
"When passing multiple prefixes be careful to not pass a prefix that "
"matches a longer prefix occurring later in the sequence.  For example, if"
" the command prefix is ``('!', '!?')``  the ``'!?'`` prefix will never be"
" matched to any message as the previous one matches messages starting "
"with ``!?``. This is especially important when passing an empty string, "
"it should always be last as no prefix after it will be matched."
msgstr ""
"複数の接頭辞を渡すとき、後の接頭辞にマッチする接頭辞を、それよりも前に渡さないよう注意してください。たとえば、接頭辞が``('!', "
"'!?')``のとき、``!?``の接頭辞は、その前のものが``!?``で始まるメッセージにマッチするため、どのメッセージにも反応しません。これは空文字列を渡すときは特に重要で、その後の接頭辞は無視されるため、空文字列は最後に置かないといけません。"

#: hcord.ext.commands.Bot:43 of
msgid ""
"Whether the commands should be case insensitive. Defaults to ``False``. "
"This attribute does not carry over to groups. You must set it to every "
"group if you require group commands to be case insensitive as well."
msgstr ""

#: hcord.ext.commands.BadBoolArgument hcord.ext.commands.BadUnionArgument
#: hcord.ext.commands.Bot hcord.ext.commands.Bot.activity
#: hcord.ext.commands.Bot.allowed_mentions
#: hcord.ext.commands.Bot.cached_messages hcord.ext.commands.Bot.cogs
#: hcord.ext.commands.Bot.commands hcord.ext.commands.Bot.emojis
#: hcord.ext.commands.Bot.extensions hcord.ext.commands.Bot.guilds
#: hcord.ext.commands.Bot.intents hcord.ext.commands.Bot.latency
#: hcord.ext.commands.Bot.private_channels hcord.ext.commands.Bot.user
#: hcord.ext.commands.Bot.users hcord.ext.commands.Bot.voice_clients
#: hcord.ext.commands.BotMissingAnyRole
#: hcord.ext.commands.BotMissingPermissions
#: hcord.ext.commands.BotMissingRole hcord.ext.commands.ChannelNotFound
#: hcord.ext.commands.ChannelNotReadable hcord.ext.commands.CheckAnyFailure
#: hcord.ext.commands.Cog.description hcord.ext.commands.Cog.qualified_name
#: hcord.ext.commands.CogMeta hcord.ext.commands.Command
#: hcord.ext.commands.Command.cog_name
#: hcord.ext.commands.Command.full_parent_name
#: hcord.ext.commands.Command.parents
#: hcord.ext.commands.Command.qualified_name
#: hcord.ext.commands.Command.root_parent
#: hcord.ext.commands.Command.short_doc
#: hcord.ext.commands.Command.signature
#: hcord.ext.commands.CommandInvokeError
#: hcord.ext.commands.CommandOnCooldown
#: hcord.ext.commands.CommandRegistrationError hcord.ext.commands.Context
#: hcord.ext.commands.Context.cog hcord.ext.commands.Context.guild
#: hcord.ext.commands.Context.valid hcord.ext.commands.Context.voice_client
#: hcord.ext.commands.ConversionError hcord.ext.commands.DefaultHelpCommand
#: hcord.ext.commands.EmojiNotFound
#: hcord.ext.commands.ExpectedClosingQuoteError
#: hcord.ext.commands.ExtensionError hcord.ext.commands.ExtensionFailed
#: hcord.ext.commands.ExtensionNotFound hcord.ext.commands.Group
#: hcord.ext.commands.Group.cog_name hcord.ext.commands.Group.commands
#: hcord.ext.commands.Group.full_parent_name
#: hcord.ext.commands.Group.parents hcord.ext.commands.Group.qualified_name
#: hcord.ext.commands.Group.root_parent hcord.ext.commands.Group.short_doc
#: hcord.ext.commands.Group.signature hcord.ext.commands.GroupMixin
#: hcord.ext.commands.GroupMixin.commands hcord.ext.commands.HelpCommand
#: hcord.ext.commands.HelpCommand.clean_prefix
#: hcord.ext.commands.InvalidEndOfQuotedStringError
#: hcord.ext.commands.MaxConcurrencyReached
#: hcord.ext.commands.MemberNotFound hcord.ext.commands.MessageNotFound
#: hcord.ext.commands.MinimalHelpCommand hcord.ext.commands.MissingAnyRole
#: hcord.ext.commands.MissingPermissions
#: hcord.ext.commands.MissingRequiredArgument
#: hcord.ext.commands.MissingRole hcord.ext.commands.Paginator
#: hcord.ext.commands.Paginator.pages
#: hcord.ext.commands.PartialEmojiConversionFailure
#: hcord.ext.commands.RoleNotFound hcord.ext.commands.UnexpectedQuoteError
#: hcord.ext.commands.UserNotFound hcord.ext.commands.clean_content of
msgid "type"
msgstr ""

#: hcord.ext.commands.Bot:47 hcord.ext.commands.Bot:61
#: hcord.ext.commands.Bot.is_owner:17 hcord.ext.commands.Command:49
#: hcord.ext.commands.Command:86 hcord.ext.commands.Command:97
#: hcord.ext.commands.Command:112 hcord.ext.commands.Command:121
#: hcord.ext.commands.Command:129 hcord.ext.commands.Command.can_run:16
#: hcord.ext.commands.Command.is_on_cooldown:7
#: hcord.ext.commands.CommandRegistrationError:18
#: hcord.ext.commands.Context:77 hcord.ext.commands.Context.valid:3
#: hcord.ext.commands.DefaultHelpCommand:18 hcord.ext.commands.Group:18
#: hcord.ext.commands.Group:25 hcord.ext.commands.Group.can_run:16
#: hcord.ext.commands.Group.is_on_cooldown:7
#: hcord.ext.commands.GroupMixin:15 hcord.ext.commands.HelpCommand:24
#: hcord.ext.commands.HelpCommand:31
#: hcord.ext.commands.MinimalHelpCommand:9
#: hcord.ext.commands.clean_content:10 hcord.ext.commands.clean_content:16
#: hcord.ext.commands.clean_content:22 of
msgid ":class:`bool`"
msgstr ""

#: hcord.ext.commands.Bot:51 of
#, fuzzy
msgid "The content prefixed into the default help message."
msgstr ":class:`str` -- この属性に入力されたテキストは、デフォルトのヘルプメッセージの先頭に表示されます。"

#: hcord.ext.commands.BadBoolArgument:11 hcord.ext.commands.Bot:53
#: hcord.ext.commands.ChannelNotFound:11
#: hcord.ext.commands.Cog.description:3
#: hcord.ext.commands.Cog.qualified_name:3 hcord.ext.commands.CogMeta:37
#: hcord.ext.commands.Command:10 hcord.ext.commands.Command:22
#: hcord.ext.commands.Command:34 hcord.ext.commands.Command:79
#: hcord.ext.commands.Command.full_parent_name:6
#: hcord.ext.commands.Command.qualified_name:7
#: hcord.ext.commands.Command.short_doc:7
#: hcord.ext.commands.Command.signature:3
#: hcord.ext.commands.CommandRegistrationError:12
#: hcord.ext.commands.Context:41 hcord.ext.commands.Context:54
#: hcord.ext.commands.DefaultHelpCommand:49
#: hcord.ext.commands.DefaultHelpCommand:56
#: hcord.ext.commands.EmojiNotFound:11
#: hcord.ext.commands.ExpectedClosingQuoteError:9
#: hcord.ext.commands.ExtensionError:9 hcord.ext.commands.ExtensionFailed:9
#: hcord.ext.commands.ExtensionNotFound:12
#: hcord.ext.commands.Group.full_parent_name:6
#: hcord.ext.commands.Group.qualified_name:7
#: hcord.ext.commands.Group.short_doc:7
#: hcord.ext.commands.Group.signature:3
#: hcord.ext.commands.HelpCommand.clean_prefix:3
#: hcord.ext.commands.HelpCommand.command_not_found:13
#: hcord.ext.commands.HelpCommand.get_command_signature:7
#: hcord.ext.commands.HelpCommand.invoked_with:10
#: hcord.ext.commands.HelpCommand.remove_mentions:6
#: hcord.ext.commands.HelpCommand.subcommand_not_found:20
#: hcord.ext.commands.InvalidEndOfQuotedStringError:10
#: hcord.ext.commands.MemberNotFound:12
#: hcord.ext.commands.MessageNotFound:11
#: hcord.ext.commands.MinimalHelpCommand:16
#: hcord.ext.commands.MinimalHelpCommand:23
#: hcord.ext.commands.MinimalHelpCommand:48
#: hcord.ext.commands.MinimalHelpCommand.get_command_signature:7
#: hcord.ext.commands.MinimalHelpCommand.get_ending_note:6
#: hcord.ext.commands.MinimalHelpCommand.get_opening_note:9
#: hcord.ext.commands.Paginator:13 hcord.ext.commands.Paginator:19
#: hcord.ext.commands.PartialEmojiConversionFailure:12
#: hcord.ext.commands.RoleNotFound:11
#: hcord.ext.commands.UnexpectedQuoteError:9
#: hcord.ext.commands.UserNotFound:12 of
msgid ":class:`str`"
msgstr ""

#: hcord.ext.commands.Bot:57 of
#, fuzzy
msgid ""
"If ``True``, the bot will only listen to commands invoked by itself "
"rather than ignoring itself. If ``False`` (the default) then the bot will"
" ignore itself. This cannot be changed once initialised."
msgstr ""
":class:`bool` -- ``True`` の場合、Botは自分自身を無視せず、自分自身を呼び出したコマンドのみをトリガーとします。 "
"``False`` (デフォルト)なら自分自身を無視します。初期化後には変更できません。"

#: hcord.ext.commands.Bot:65 of
#, fuzzy
msgid ""
"The help command implementation to use. This can be dynamically set at "
"runtime. To remove the help command pass ``None``. For more information "
"on implementing a help command, see :ref:`ext_commands_help_command`."
msgstr ""
"Optional[:class:`.HelpCommand`] -- "
"ヘルプコマンドの実装。これは、実行時に動的に設定できます。ヘルプコマンドを削除するには、``None`` "
"を入力してください。ヘルプコマンドの実装の詳細については、 :ref:'ext_commands_help_command' を参照してください。"

#: hcord.ext.commands.Bot:69 of
msgid "Optional[:class:`.HelpCommand`]"
msgstr ""

#: hcord.ext.commands.Bot:73 of
#, fuzzy
msgid ""
"The user ID that owns the bot. If this is not set and is then queried via"
" :meth:`.is_owner` then it is fetched automatically using "
":meth:`~.Bot.application_info`."
msgstr ""
"Optional[:class:`int`] -- Botを管理するユーザーのID。 設定されていない場合、 :meth:`.is_owner` "
"を介して参照されたとき、 :meth:`~.Bot.application_info` を用いて自動的に取得されます。"

#: hcord.ext.commands.Bot:77 hcord.ext.commands.DefaultHelpCommand:36
#: hcord.ext.commands.MinimalHelpCommand:41 of
msgid "Optional[:class:`int`]"
msgstr ""

#: hcord.ext.commands.Bot:81 of
msgid ""
"The user IDs that owns the bot. This is similar to :attr:`owner_id`. If "
"this is not set and the application is team based, then it is fetched "
"automatically using :meth:`~.Bot.application_info`. For performance "
"reasons it is recommended to use a :class:`set` for the collection. You "
"cannot set both ``owner_id`` and ``owner_ids``."
msgstr ""

#: hcord.ext.commands.Bot:89 of
msgid "Optional[Collection[:class:`int`]]"
msgstr ""

#: hcord.ext.commands.Bot.activity:1 of
msgid "The activity being used upon logging in."
msgstr ""

#: hcord.ext.commands.Bot.activity:4 of
msgid "Optional[:class:`.BaseActivity`]"
msgstr ""

#: hcord.ext.commands.Bot.add_check:1 of
msgid "Adds a global check to the bot."
msgstr "ボットにグローバルチェックを追加します。"

#: hcord.ext.commands.Bot.add_check:3 of
msgid ""
"This is the non-decorator interface to :meth:`.check` and "
":meth:`.check_once`."
msgstr "これは:meth:`.check`と:meth:`.check_once`のデコレータでない実装です。"

#: ../../ext/commands/api.rst hcord.ext.commands.Bot.add_check
#: hcord.ext.commands.Bot.add_cog hcord.ext.commands.Bot.add_command
#: hcord.ext.commands.Bot.add_listener hcord.ext.commands.Bot.after_invoke
#: hcord.ext.commands.Bot.before_identify_hook
#: hcord.ext.commands.Bot.before_invoke
#: hcord.ext.commands.Bot.change_presence hcord.ext.commands.Bot.connect
#: hcord.ext.commands.Bot.create_guild hcord.ext.commands.Bot.delete_invite
#: hcord.ext.commands.Bot.fetch_guild hcord.ext.commands.Bot.fetch_guilds
#: hcord.ext.commands.Bot.fetch_invite
#: hcord.ext.commands.Bot.fetch_template hcord.ext.commands.Bot.fetch_user
#: hcord.ext.commands.Bot.fetch_user_profile
#: hcord.ext.commands.Bot.fetch_widget hcord.ext.commands.Bot.get_channel
#: hcord.ext.commands.Bot.get_cog hcord.ext.commands.Bot.get_command
#: hcord.ext.commands.Bot.get_context hcord.ext.commands.Bot.get_emoji
#: hcord.ext.commands.Bot.get_guild hcord.ext.commands.Bot.get_prefix
#: hcord.ext.commands.Bot.get_user hcord.ext.commands.Bot.invoke
#: hcord.ext.commands.Bot.is_owner hcord.ext.commands.Bot.load_extension
#: hcord.ext.commands.Bot.login hcord.ext.commands.Bot.process_commands
#: hcord.ext.commands.Bot.reload_extension
#: hcord.ext.commands.Bot.remove_check hcord.ext.commands.Bot.remove_cog
#: hcord.ext.commands.Bot.remove_command
#: hcord.ext.commands.Bot.remove_listener
#: hcord.ext.commands.Bot.request_offline_members
#: hcord.ext.commands.Bot.unload_extension hcord.ext.commands.Bot.wait_for
#: hcord.ext.commands.CategoryChannelConverter.convert
#: hcord.ext.commands.Cog.cog_after_invoke
#: hcord.ext.commands.Cog.cog_before_invoke
#: hcord.ext.commands.Cog.cog_command_error hcord.ext.commands.Cog.listener
#: hcord.ext.commands.ColourConverter.convert
#: hcord.ext.commands.Command.add_check
#: hcord.ext.commands.Command.after_invoke
#: hcord.ext.commands.Command.before_invoke
#: hcord.ext.commands.Command.can_run hcord.ext.commands.Command.error
#: hcord.ext.commands.Command.get_cooldown_retry_after
#: hcord.ext.commands.Command.is_on_cooldown
#: hcord.ext.commands.Command.remove_check
#: hcord.ext.commands.Command.reset_cooldown
#: hcord.ext.commands.Context.fetch_message
#: hcord.ext.commands.Context.history hcord.ext.commands.Context.invoke
#: hcord.ext.commands.Context.reinvoke hcord.ext.commands.Context.send
#: hcord.ext.commands.Context.send_help
#: hcord.ext.commands.Converter.convert
#: hcord.ext.commands.DefaultHelpCommand.add_command_formatting
#: hcord.ext.commands.DefaultHelpCommand.add_indented_commands
#: hcord.ext.commands.EmojiConverter.convert
#: hcord.ext.commands.GameConverter.convert
#: hcord.ext.commands.Group.add_check hcord.ext.commands.Group.add_command
#: hcord.ext.commands.Group.after_invoke
#: hcord.ext.commands.Group.before_invoke hcord.ext.commands.Group.can_run
#: hcord.ext.commands.Group.error hcord.ext.commands.Group.get_command
#: hcord.ext.commands.Group.get_cooldown_retry_after
#: hcord.ext.commands.Group.is_on_cooldown
#: hcord.ext.commands.Group.remove_check
#: hcord.ext.commands.Group.remove_command
#: hcord.ext.commands.Group.reset_cooldown
#: hcord.ext.commands.GroupMixin.add_command
#: hcord.ext.commands.GroupMixin.get_command
#: hcord.ext.commands.GroupMixin.remove_command
#: hcord.ext.commands.HelpCommand.add_check
#: hcord.ext.commands.HelpCommand.command_not_found
#: hcord.ext.commands.HelpCommand.filter_commands
#: hcord.ext.commands.HelpCommand.get_command_signature
#: hcord.ext.commands.HelpCommand.get_max_size
#: hcord.ext.commands.HelpCommand.on_help_command_error
#: hcord.ext.commands.HelpCommand.prepare_help_command
#: hcord.ext.commands.HelpCommand.remove_check
#: hcord.ext.commands.HelpCommand.send_bot_help
#: hcord.ext.commands.HelpCommand.send_cog_help
#: hcord.ext.commands.HelpCommand.send_command_help
#: hcord.ext.commands.HelpCommand.send_error_message
#: hcord.ext.commands.HelpCommand.send_group_help
#: hcord.ext.commands.HelpCommand.subcommand_not_found
#: hcord.ext.commands.InviteConverter.convert
#: hcord.ext.commands.MemberConverter.convert
#: hcord.ext.commands.MessageConverter.convert
#: hcord.ext.commands.MinimalHelpCommand.add_aliases_formatting
#: hcord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting
#: hcord.ext.commands.MinimalHelpCommand.add_command_formatting
#: hcord.ext.commands.MinimalHelpCommand.add_subcommand_formatting
#: hcord.ext.commands.MinimalHelpCommand.get_command_signature
#: hcord.ext.commands.NSFWChannelRequired
#: hcord.ext.commands.Paginator.add_line
#: hcord.ext.commands.PartialEmojiConverter.convert
#: hcord.ext.commands.RoleConverter.convert
#: hcord.ext.commands.TextChannelConverter.convert
#: hcord.ext.commands.UserConverter.convert
#: hcord.ext.commands.VoiceChannelConverter.convert
#: hcord.ext.commands.check hcord.ext.commands.check_any
#: hcord.ext.commands.clean_content.convert hcord.ext.commands.command
#: hcord.ext.commands.cooldown hcord.ext.commands.has_any_role
#: hcord.ext.commands.has_permissions hcord.ext.commands.has_role
#: hcord.ext.commands.max_concurrency of
msgid "Parameters"
msgstr "パラメータ"

#: hcord.ext.commands.Bot.add_check:6 of
msgid "The function that was used as a global check."
msgstr "グローバルチェックとして使用される関数。"

#: hcord.ext.commands.Bot.add_check:7 of
#, fuzzy
msgid ""
"If the function should only be called once per :meth:`.Command.invoke` "
"call."
msgstr "その関数が :meth:`Command.invoke` の呼び出し時に、一度だけ呼び出されるべきかどうか。"

#: hcord.ext.commands.Bot.add_cog:1 of
msgid "Adds a \"cog\" to the bot."
msgstr "botに「コグ」を追加します。"

#: hcord.ext.commands.Bot.add_cog:3 of
msgid "A cog is a class that has its own event listeners and commands."
msgstr "コグは、イベントリスナーとコマンドを持つクラスです。"

#: hcord.ext.commands.Bot.add_cog:5 of
msgid "The cog to register to the bot."
msgstr "ボットに登録するコグ。"

#: hcord.ext.commands.Bot.add_cog hcord.ext.commands.Bot.add_command
#: hcord.ext.commands.Bot.after_invoke
#: hcord.ext.commands.Bot.application_info
#: hcord.ext.commands.Bot.before_invoke
#: hcord.ext.commands.Bot.change_presence hcord.ext.commands.Bot.connect
#: hcord.ext.commands.Bot.create_guild hcord.ext.commands.Bot.delete_invite
#: hcord.ext.commands.Bot.event hcord.ext.commands.Bot.fetch_channel
#: hcord.ext.commands.Bot.fetch_guild hcord.ext.commands.Bot.fetch_guilds
#: hcord.ext.commands.Bot.fetch_invite
#: hcord.ext.commands.Bot.fetch_template hcord.ext.commands.Bot.fetch_user
#: hcord.ext.commands.Bot.fetch_user_profile
#: hcord.ext.commands.Bot.fetch_webhook hcord.ext.commands.Bot.fetch_widget
#: hcord.ext.commands.Bot.listen hcord.ext.commands.Bot.load_extension
#: hcord.ext.commands.Bot.login hcord.ext.commands.Bot.reload_extension
#: hcord.ext.commands.Bot.request_offline_members
#: hcord.ext.commands.Bot.start hcord.ext.commands.Bot.unload_extension
#: hcord.ext.commands.Bot.wait_for
#: hcord.ext.commands.CategoryChannelConverter.convert
#: hcord.ext.commands.Cog.listener
#: hcord.ext.commands.ColourConverter.convert
#: hcord.ext.commands.Command.after_invoke
#: hcord.ext.commands.Command.before_invoke
#: hcord.ext.commands.Command.can_run hcord.ext.commands.Command.error
#: hcord.ext.commands.Context.fetch_message
#: hcord.ext.commands.Context.history hcord.ext.commands.Context.invoke
#: hcord.ext.commands.Context.pins hcord.ext.commands.Context.reinvoke
#: hcord.ext.commands.Context.send hcord.ext.commands.Converter.convert
#: hcord.ext.commands.EmojiConverter.convert
#: hcord.ext.commands.GameConverter.convert
#: hcord.ext.commands.Group.add_command
#: hcord.ext.commands.Group.after_invoke
#: hcord.ext.commands.Group.before_invoke hcord.ext.commands.Group.can_run
#: hcord.ext.commands.Group.error hcord.ext.commands.GroupMixin.add_command
#: hcord.ext.commands.InviteConverter.convert
#: hcord.ext.commands.MemberConverter.convert
#: hcord.ext.commands.MessageConverter.convert
#: hcord.ext.commands.Paginator.add_line
#: hcord.ext.commands.PartialEmojiConverter.convert
#: hcord.ext.commands.RoleConverter.convert
#: hcord.ext.commands.TextChannelConverter.convert
#: hcord.ext.commands.UserConverter.convert
#: hcord.ext.commands.VoiceChannelConverter.convert
#: hcord.ext.commands.check_any hcord.ext.commands.clean_content.convert
#: hcord.ext.commands.command of
#, fuzzy
msgid "Raises"
msgstr "例外"

#: hcord.ext.commands.Bot.add_cog:8 of
#, fuzzy
msgid "The cog does not inherit from :class:`.Cog`."
msgstr ":exc:`TypeError -- コグが :class:`.Cog` を継承していない。"

#: hcord.ext.commands.Bot.add_cog:9 of
#, fuzzy
msgid "An error happened during loading."
msgstr ":exc:`CommandError` -- 読み込み中にエラーが発生した。"

#: hcord.ext.commands.Bot.add_command:1
#: hcord.ext.commands.Group.add_command:1
#: hcord.ext.commands.GroupMixin.add_command:1 of
#, fuzzy
msgid "Adds a :class:`.Command` into the internal list of commands."
msgstr ":class:`.Command`やそのサブクラスを内部のコマンドリストに追加します。"

#: hcord.ext.commands.Bot.add_command:3
#: hcord.ext.commands.Group.add_command:3
#: hcord.ext.commands.GroupMixin.add_command:3 of
msgid ""
"This is usually not called, instead the :meth:`~.GroupMixin.command` or "
":meth:`~.GroupMixin.group` shortcut decorators are used instead."
msgstr ""
"これは通常、呼び出されません。代わりに :meth:`~.GroupMixin.command` か "
":meth:`~.GroupMixin.group` のショートカットデコレータが使われます。"

#: hcord.ext.commands.Bot.add_command:6
#: hcord.ext.commands.Group.add_command:6
#: hcord.ext.commands.GroupMixin.add_command:6 of
msgid ""
"Raise :exc:`.CommandRegistrationError` instead of generic "
":exc:`.ClientException`"
msgstr ""

#: hcord.ext.commands.Bot.add_command:9
#: hcord.ext.commands.Group.add_command:9
#: hcord.ext.commands.GroupMixin.add_command:9 of
msgid "The command to add."
msgstr "追加するコマンド。"

#: hcord.ext.commands.Bot.add_command:12
#: hcord.ext.commands.Group.add_command:12
#: hcord.ext.commands.GroupMixin.add_command:12 of
msgid "If the command or its alias is already registered by different command."
msgstr ""

#: hcord.ext.commands.Bot.add_command:13
#: hcord.ext.commands.Group.add_command:13
#: hcord.ext.commands.GroupMixin.add_command:13 of
#, fuzzy
msgid "If the command passed is not a subclass of :class:`.Command`."
msgstr ":exc:`TypeError` -- 渡されたコマンドが:class:`.Command`のサブコマンドではないという例外"

#: hcord.ext.commands.Bot.add_listener:1 of
msgid "The non decorator alternative to :meth:`.listen`."
msgstr ":meth:`.listen` の代替の非デコレータ"

#: hcord.ext.commands.Bot.add_listener:3 of
msgid "The function to call."
msgstr "呼び出される関数"

#: hcord.ext.commands.Bot.add_listener:5 of
msgid "The name of the event to listen for. Defaults to ``func.__name__``."
msgstr "待機するイベントの名前。デフォルトでは ``func.__name__`` です。"

#: hcord.ext.commands.Bot.add_listener:9
#: hcord.ext.commands.Bot.change_presence:6 hcord.ext.commands.Bot.check:16
#: hcord.ext.commands.Bot.check_once:26 hcord.ext.commands.Bot.event:8
#: hcord.ext.commands.Bot.listen:8 hcord.ext.commands.before_invoke:9
#: hcord.ext.commands.has_any_role:20 hcord.ext.commands.has_permissions:16
#: hcord.ext.commands.when_mentioned_or:6 of
msgid "Example"
msgstr "例"

#: hcord.ext.commands.Bot.after_invoke:1
#: hcord.ext.commands.Command.after_invoke:1
#: hcord.ext.commands.Group.after_invoke:1
#: hcord.ext.commands.after_invoke:1 of
msgid "A decorator that registers a coroutine as a post-invoke hook."
msgstr ""

#: hcord.ext.commands.Bot.after_invoke:3
#: hcord.ext.commands.Command.after_invoke:3
#: hcord.ext.commands.Group.after_invoke:3 of
msgid ""
"A post-invoke hook is called directly after the command is called. This "
"makes it a useful function to clean-up database connections or any type "
"of clean up required."
msgstr ""

#: hcord.ext.commands.Bot.after_invoke:7
#: hcord.ext.commands.Command.after_invoke:7
#: hcord.ext.commands.Group.after_invoke:7 of
msgid "This post-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: hcord.ext.commands.Bot.after_invoke:11 of
msgid ""
"Similar to :meth:`~.Bot.before_invoke`\\, this is not called unless "
"checks and argument parsing procedures succeed. This hook is, however, "
"**always** called regardless of the internal command callback raising an "
"error (i.e. :exc:`.CommandInvokeError`\\). This makes it ideal for clean-"
"up scenarios."
msgstr ""

#: hcord.ext.commands.Bot.after_invoke:17
#: hcord.ext.commands.Command.after_invoke:11
#: hcord.ext.commands.Group.after_invoke:11 of
msgid "The coroutine to register as the post-invoke hook."
msgstr ""

#: hcord.ext.commands.Bot.after_invoke:20
#: hcord.ext.commands.Bot.before_invoke:19 hcord.ext.commands.Bot.event:15
#: hcord.ext.commands.Command.after_invoke:14
#: hcord.ext.commands.Command.before_invoke:14
#: hcord.ext.commands.Command.error:10
#: hcord.ext.commands.Group.after_invoke:14
#: hcord.ext.commands.Group.before_invoke:14
#: hcord.ext.commands.Group.error:10 of
#, fuzzy
msgid "The coroutine passed is not actually a coroutine."
msgstr ":exc:`TypeError` -- 渡されたコルーチンが実際はコルーチンではない。"

#: hcord.ext.commands.Bot.allowed_mentions:1 of
msgid "The allowed mention configuration."
msgstr ""

#: hcord.ext.commands.Bot.allowed_mentions:5 of
msgid "Optional[:class:`~hcord.AllowedMentions`]"
msgstr ""

#: hcord.ext.commands.Bot.application_info:1
#: hcord.ext.commands.Bot.before_identify_hook:1
#: hcord.ext.commands.Bot.change_presence:1
#: hcord.ext.commands.Bot.connect:1 hcord.ext.commands.Bot.create_guild:1
#: hcord.ext.commands.Bot.delete_invite:1
#: hcord.ext.commands.Bot.fetch_channel:1
#: hcord.ext.commands.Bot.fetch_guild:1
#: hcord.ext.commands.Bot.fetch_guilds:1
#: hcord.ext.commands.Bot.fetch_invite:1
#: hcord.ext.commands.Bot.fetch_template:1
#: hcord.ext.commands.Bot.fetch_user:1
#: hcord.ext.commands.Bot.fetch_user_profile:1
#: hcord.ext.commands.Bot.fetch_webhook:1
#: hcord.ext.commands.Bot.fetch_widget:1
#: hcord.ext.commands.Bot.get_context:1 hcord.ext.commands.Bot.get_prefix:1
#: hcord.ext.commands.Bot.invoke:1 hcord.ext.commands.Bot.is_owner:1
#: hcord.ext.commands.Bot.login:1 hcord.ext.commands.Bot.logout:1
#: hcord.ext.commands.Bot.on_command_error:1
#: hcord.ext.commands.Bot.on_error:1
#: hcord.ext.commands.Bot.process_commands:1
#: hcord.ext.commands.Bot.request_offline_members:1
#: hcord.ext.commands.Bot.start:1 hcord.ext.commands.Bot.wait_for:1
#: hcord.ext.commands.Bot.wait_until_ready:1
#: hcord.ext.commands.CategoryChannelConverter.convert:1
#: hcord.ext.commands.ColourConverter.convert:1
#: hcord.ext.commands.Command.__call__:1
#: hcord.ext.commands.Command.can_run:1
#: hcord.ext.commands.Context.fetch_message:1
#: hcord.ext.commands.Context.invoke:1 hcord.ext.commands.Context.pins:1
#: hcord.ext.commands.Context.reinvoke:1 hcord.ext.commands.Context.send:1
#: hcord.ext.commands.Context.send_help:1
#: hcord.ext.commands.Context.trigger_typing:1
#: hcord.ext.commands.Converter.convert:1
#: hcord.ext.commands.EmojiConverter.convert:1
#: hcord.ext.commands.GameConverter.convert:1
#: hcord.ext.commands.Group.can_run:1
#: hcord.ext.commands.HelpCommand.command_callback:1
#: hcord.ext.commands.HelpCommand.filter_commands:1
#: hcord.ext.commands.HelpCommand.on_help_command_error:1
#: hcord.ext.commands.HelpCommand.prepare_help_command:1
#: hcord.ext.commands.HelpCommand.send_bot_help:1
#: hcord.ext.commands.HelpCommand.send_cog_help:1
#: hcord.ext.commands.HelpCommand.send_command_help:1
#: hcord.ext.commands.HelpCommand.send_error_message:1
#: hcord.ext.commands.HelpCommand.send_group_help:1
#: hcord.ext.commands.InviteConverter.convert:1
#: hcord.ext.commands.MemberConverter.convert:1
#: hcord.ext.commands.MessageConverter.convert:1
#: hcord.ext.commands.PartialEmojiConverter.convert:1
#: hcord.ext.commands.RoleConverter.convert:1
#: hcord.ext.commands.TextChannelConverter.convert:1
#: hcord.ext.commands.UserConverter.convert:1
#: hcord.ext.commands.VoiceChannelConverter.convert:1
#: hcord.ext.commands.clean_content.convert:1 of
msgid "|coro|"
msgstr "|coro|"

#: hcord.ext.commands.Bot.application_info:3 of
msgid "Retrieves the bot's application information."
msgstr "Botのアプリケーション情報を取得します。"

#: hcord.ext.commands.Bot.application_info:5 of
#, fuzzy
msgid "Retrieving the information failed somehow."
msgstr ":exc:`.HTTPException` -- 何らかの要因で情報の取得に失敗した。"

#: hcord.ext.commands.Bot.application_info hcord.ext.commands.Bot.command
#: hcord.ext.commands.Bot.create_guild hcord.ext.commands.Bot.fetch_channel
#: hcord.ext.commands.Bot.fetch_guild hcord.ext.commands.Bot.fetch_invite
#: hcord.ext.commands.Bot.fetch_template hcord.ext.commands.Bot.fetch_user
#: hcord.ext.commands.Bot.fetch_user_profile
#: hcord.ext.commands.Bot.fetch_webhook hcord.ext.commands.Bot.fetch_widget
#: hcord.ext.commands.Bot.get_channel hcord.ext.commands.Bot.get_cog
#: hcord.ext.commands.Bot.get_command hcord.ext.commands.Bot.get_context
#: hcord.ext.commands.Bot.get_emoji hcord.ext.commands.Bot.get_guild
#: hcord.ext.commands.Bot.get_prefix hcord.ext.commands.Bot.get_user
#: hcord.ext.commands.Bot.group hcord.ext.commands.Bot.is_owner
#: hcord.ext.commands.Bot.remove_command hcord.ext.commands.Bot.wait_for
#: hcord.ext.commands.Cog.get_commands hcord.ext.commands.Cog.get_listeners
#: hcord.ext.commands.Command.can_run hcord.ext.commands.Command.copy
#: hcord.ext.commands.Command.get_cooldown_retry_after
#: hcord.ext.commands.Command.is_on_cooldown
#: hcord.ext.commands.Context.fetch_message hcord.ext.commands.Context.pins
#: hcord.ext.commands.Context.send hcord.ext.commands.Context.send_help
#: hcord.ext.commands.DefaultHelpCommand.get_destination
#: hcord.ext.commands.Group.can_run hcord.ext.commands.Group.command
#: hcord.ext.commands.Group.copy hcord.ext.commands.Group.get_command
#: hcord.ext.commands.Group.get_cooldown_retry_after
#: hcord.ext.commands.Group.group hcord.ext.commands.Group.is_on_cooldown
#: hcord.ext.commands.Group.remove_command
#: hcord.ext.commands.GroupMixin.command
#: hcord.ext.commands.GroupMixin.get_command
#: hcord.ext.commands.GroupMixin.group
#: hcord.ext.commands.GroupMixin.remove_command
#: hcord.ext.commands.HelpCommand.cog
#: hcord.ext.commands.HelpCommand.command_not_found
#: hcord.ext.commands.HelpCommand.filter_commands
#: hcord.ext.commands.HelpCommand.get_command_signature
#: hcord.ext.commands.HelpCommand.get_destination
#: hcord.ext.commands.HelpCommand.get_max_size
#: hcord.ext.commands.HelpCommand.invoked_with
#: hcord.ext.commands.HelpCommand.remove_mentions
#: hcord.ext.commands.HelpCommand.subcommand_not_found
#: hcord.ext.commands.MinimalHelpCommand.get_command_signature
#: hcord.ext.commands.MinimalHelpCommand.get_destination
#: hcord.ext.commands.MinimalHelpCommand.get_ending_note
#: hcord.ext.commands.MinimalHelpCommand.get_opening_note of
msgid "Returns"
msgstr "戻り値"

#: hcord.ext.commands.Bot.application_info:7 of
msgid "The bot's application information."
msgstr "Botのアプリケーション情報。"

#: hcord.ext.commands.Bot.application_info hcord.ext.commands.Bot.command
#: hcord.ext.commands.Bot.create_guild hcord.ext.commands.Bot.fetch_channel
#: hcord.ext.commands.Bot.fetch_guild hcord.ext.commands.Bot.fetch_invite
#: hcord.ext.commands.Bot.fetch_template hcord.ext.commands.Bot.fetch_user
#: hcord.ext.commands.Bot.fetch_user_profile
#: hcord.ext.commands.Bot.fetch_webhook hcord.ext.commands.Bot.fetch_widget
#: hcord.ext.commands.Bot.get_channel hcord.ext.commands.Bot.get_cog
#: hcord.ext.commands.Bot.get_command hcord.ext.commands.Bot.get_context
#: hcord.ext.commands.Bot.get_emoji hcord.ext.commands.Bot.get_guild
#: hcord.ext.commands.Bot.get_prefix hcord.ext.commands.Bot.get_user
#: hcord.ext.commands.Bot.group hcord.ext.commands.Bot.is_owner
#: hcord.ext.commands.Bot.remove_command hcord.ext.commands.Bot.wait_for
#: hcord.ext.commands.Cog.get_commands hcord.ext.commands.Cog.get_listeners
#: hcord.ext.commands.Command.can_run hcord.ext.commands.Command.copy
#: hcord.ext.commands.Command.get_cooldown_retry_after
#: hcord.ext.commands.Command.is_on_cooldown
#: hcord.ext.commands.Context.fetch_message hcord.ext.commands.Context.pins
#: hcord.ext.commands.Context.send hcord.ext.commands.Context.send_help
#: hcord.ext.commands.DefaultHelpCommand.get_destination
#: hcord.ext.commands.Group.can_run hcord.ext.commands.Group.command
#: hcord.ext.commands.Group.copy hcord.ext.commands.Group.get_command
#: hcord.ext.commands.Group.get_cooldown_retry_after
#: hcord.ext.commands.Group.group hcord.ext.commands.Group.is_on_cooldown
#: hcord.ext.commands.Group.remove_command
#: hcord.ext.commands.GroupMixin.command
#: hcord.ext.commands.GroupMixin.get_command
#: hcord.ext.commands.GroupMixin.group
#: hcord.ext.commands.GroupMixin.remove_command
#: hcord.ext.commands.HelpCommand.cog
#: hcord.ext.commands.HelpCommand.command_not_found
#: hcord.ext.commands.HelpCommand.filter_commands
#: hcord.ext.commands.HelpCommand.get_command_signature
#: hcord.ext.commands.HelpCommand.get_destination
#: hcord.ext.commands.HelpCommand.get_max_size
#: hcord.ext.commands.HelpCommand.invoked_with
#: hcord.ext.commands.HelpCommand.remove_mentions
#: hcord.ext.commands.HelpCommand.subcommand_not_found
#: hcord.ext.commands.MinimalHelpCommand.get_command_signature
#: hcord.ext.commands.MinimalHelpCommand.get_destination
#: hcord.ext.commands.MinimalHelpCommand.get_ending_note
#: hcord.ext.commands.MinimalHelpCommand.get_opening_note of
msgid "Return type"
msgstr "戻り値の型"

#: hcord.ext.commands.Bot.application_info:8 of
msgid ":class:`.AppInfo`"
msgstr ":class:`.AppInfo`"

#: hcord.ext.commands.Bot.before_identify_hook:3 of
msgid ""
"A hook that is called before IDENTIFYing a session. This is useful if you"
" wish to have more control over the synchronization of multiple "
"IDENTIFYing clients."
msgstr ""

#: hcord.ext.commands.Bot.before_identify_hook:7 of
msgid "The default implementation sleeps for 5 seconds."
msgstr ""

#: hcord.ext.commands.Bot.before_identify_hook:11 of
msgid "The shard ID that requested being IDENTIFY'd"
msgstr ""

#: hcord.ext.commands.Bot.before_identify_hook:13 of
msgid "Whether this IDENTIFY is the first initial IDENTIFY."
msgstr ""

#: hcord.ext.commands.Bot.before_invoke:1
#: hcord.ext.commands.Command.before_invoke:1
#: hcord.ext.commands.Group.before_invoke:1
#: hcord.ext.commands.before_invoke:1 of
msgid "A decorator that registers a coroutine as a pre-invoke hook."
msgstr ""

#: hcord.ext.commands.Bot.before_invoke:3
#: hcord.ext.commands.Command.before_invoke:3
#: hcord.ext.commands.Group.before_invoke:3 of
msgid ""
"A pre-invoke hook is called directly before the command is called. This "
"makes it a useful function to set up database connections or any type of "
"set up required."
msgstr ""

#: hcord.ext.commands.Bot.before_invoke:7
#: hcord.ext.commands.Command.before_invoke:7
#: hcord.ext.commands.Group.before_invoke:7 of
msgid "This pre-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: hcord.ext.commands.Bot.before_invoke:11 of
msgid ""
"The :meth:`~.Bot.before_invoke` and :meth:`~.Bot.after_invoke` hooks are "
"only called if all checks and argument parsing procedures pass without "
"error. If any check or argument parsing procedures fail then the hooks "
"are not called."
msgstr ""

#: hcord.ext.commands.Bot.before_invoke:16
#: hcord.ext.commands.Command.before_invoke:11
#: hcord.ext.commands.Group.before_invoke:11 of
msgid "The coroutine to register as the pre-invoke hook."
msgstr ""

#: hcord.ext.commands.Bot.cached_messages:1 of
#, fuzzy
msgid "Read-only list of messages the connected client has cached."
msgstr "Sequence[:class:`.Message`] -- 接続されたクライアントにキャッシュされたメッセージの、読み取り専用リスト。"

#: hcord.ext.commands.Bot.cached_messages:5 of
msgid "Sequence[:class:`.Message`]"
msgstr ""

#: hcord.ext.commands.Bot.change_presence:3 of
msgid "Changes the client's presence."
msgstr "クライアントのステータスを変更します。"

#: hcord.ext.commands.Bot.change_presence:12 of
msgid "The activity being done. ``None`` if no currently active activity is done."
msgstr "実行中のアクティビティ。何も実行していない場合は ``None`` を返します。"

#: hcord.ext.commands.Bot.change_presence:14 of
msgid ""
"Indicates what status to change to. If ``None``, then "
":attr:`.Status.online` is used."
msgstr "変更するステータスを示します。 ``None`` の場合、 :attr:`.Status.online` が使用されます。"

#: hcord.ext.commands.Bot.change_presence:17 of
msgid ""
"Indicates if you are going AFK. This allows the discord client to know "
"how to handle push notifications better for you in case you are actually "
"idle and not lying."
msgstr "ステータスを退席中に変更するかどうかを返します。これによって、実際にアイドル状態に移行した場合において、Discordクライアントにプッシュ通知をより適切に処理させることができます。"

#: hcord.ext.commands.Bot.change_presence:22 of
#, fuzzy
msgid "If the ``activity`` parameter is not the proper type."
msgstr ":exc:`.InvalidArgument` -- ``activity`` に渡された値が適切な型でない。"

#: hcord.ext.commands.Bot.check:1 of
msgid "A decorator that adds a global check to the bot."
msgstr "Botにグローバルチェックを追加するデコレーター"

#: hcord.ext.commands.Bot.check:3 of
msgid ""
"A global check is similar to a :func:`.check` that is applied on a per "
"command basis except it is run before any command checks have been "
"verified and applies to every command the bot has."
msgstr ""
"このグローバルチェックは、 :func:`.check` "
"がコマンドごとに適用されるのと似ていますが、コマンドチェックが検証され、かつBotが持つすべてのコマンドが適用される前に実行される点で異なります。"

#: hcord.ext.commands.Bot.check:9 hcord.ext.commands.Bot.check_once:19 of
msgid "This function can either be a regular function or a coroutine."
msgstr "この関数は、通常の関数かコルーチン、どちらでも成り得ます。"

#: hcord.ext.commands.Bot.check:11 hcord.ext.commands.Bot.check_once:21 of
msgid ""
"Similar to a command :func:`.check`\\, this takes a single parameter of "
"type :class:`.Context` and can only raise exceptions inherited from "
":exc:`.CommandError`."
msgstr ""
":func:`.check` コマンドと同様、 :class:`.Context` 型の単一のパラメータを取り、 "
":exc:`.CommandError` から継承された例外のみを投げることができます。"

#: hcord.ext.commands.Bot.check_once:1 of
msgid "A decorator that adds a \"call once\" global check to the bot."
msgstr "Botに「一度だけ実行される」グローバルチェックを追加するデコレーター"

#: hcord.ext.commands.Bot.check_once:3 of
#, fuzzy
msgid ""
"Unlike regular global checks, this one is called only once per "
":meth:`.Command.invoke` call."
msgstr "通常のグローバルチェックと違って、これは :meth:`Command.invoke` が呼ばれる毎に一度だけ実行されます。"

#: hcord.ext.commands.Bot.check_once:6 of
msgid ""
"Regular global checks are called whenever a command is called or "
":meth:`.Command.can_run` is called. This type of check bypasses that and "
"ensures that it's called only once, even inside the default help command."
msgstr ""
"通常のグローバルチェックは、コマンドが呼び出されるか :meth:`.Command.can_run` "
"が呼び出されるたび、実行されます。しかしこのグローバルチェックはそれを迂回し、デフォルトのhelpコマンドの中であっても、たった一度だけ呼ばれます。"

#: hcord.ext.commands.Bot.check_once:13 of
msgid ""
"When using this function the :class:`.Context` sent to a group subcommand"
" may only parse the parent command and not the subcommands due to it "
"being invoked once per :meth:`.Bot.invoke` call."
msgstr ""

#: hcord.ext.commands.Bot.clear:1 of
msgid "Clears the internal state of the bot."
msgstr "Botの内部状態をクリアします。"

#: hcord.ext.commands.Bot.clear:3 of
msgid ""
"After this, the bot can be considered \"re-opened\", i.e. "
":meth:`is_closed` and :meth:`is_ready` both return ``False`` along with "
"the bot's internal cache cleared."
msgstr ""
"これが実行されると、Botは「再実行」されたと見なされます。また、これにより :meth:`is_closed` や "
":meth:`is_ready` は ``False`` を返し、内部のキャッシュもクリアされます。"

#: hcord.ext.commands.Bot.cogs:1 of
#, fuzzy
msgid "A read-only mapping of cog name to cog."
msgstr "Mapping[:class:`str`, :class:`Cog`] -- コグ名から、コグへの読み取り専用マッピング。"

#: hcord.ext.commands.Bot.cogs:3 of
msgid "Mapping[:class:`str`, :class:`Cog`]"
msgstr ""

#: hcord.ext.commands.Bot.command:1 hcord.ext.commands.Group.command:1
#: hcord.ext.commands.GroupMixin.command:1 of
msgid ""
"A shortcut decorator that invokes :func:`.command` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""
":func:`.command` を呼び出し、 :meth:`~.GroupMixin.add_command` "
"を介して内部コマンドリストに追加するショートカットデコレータ。"

#: hcord.ext.commands.Bot.command:4 hcord.ext.commands.Group.command:4
#: hcord.ext.commands.GroupMixin.command:4 of
msgid ""
"A decorator that converts the provided method into a Command, adds it to "
"the bot, then returns it."
msgstr ""

#: hcord.ext.commands.Bot.command:5 hcord.ext.commands.Group.command:5
#: hcord.ext.commands.GroupMixin.command:5 of
msgid "Callable[..., :class:`Command`]"
msgstr ""

#: hcord.ext.commands.Bot.commands:1 hcord.ext.commands.Group.commands:1
#: hcord.ext.commands.GroupMixin.commands:1 of
#, fuzzy
msgid "A unique set of commands without aliases that are registered."
msgstr "Set[:class:`.Command`] -- 登録済みの別名がない固有のコマンドセット。"

#: hcord.ext.commands.Bot.commands:3 hcord.ext.commands.Group.commands:3
#: hcord.ext.commands.GroupMixin.commands:3 of
#, fuzzy
msgid "Set[:class:`.Command`]"
msgstr ":class:`Command` またはサブクラス"

#: hcord.ext.commands.Bot.connect:3 of
msgid ""
"Creates a websocket connection and lets the websocket listen to messages "
"from hcord. This is a loop that runs the entire event system and "
"miscellaneous aspects of the library. Control is not resumed until the "
"WebSocket connection is terminated."
msgstr "WebSocket接続を作成し、Discordからのメッセージをリッスンできるようにします。これはイベントシステム全体とライブラリの様々な機能を実行するループです。WebSocket接続が終了するまで、プログラムは再開されません。"

#: hcord.ext.commands.Bot.connect:8 of
msgid ""
"If we should attempt reconnecting, either due to internet failure or a "
"specific failure on Discord's part. Certain disconnects that lead to bad "
"state will not be handled (such as invalid sharding payloads or bad "
"tokens)."
msgstr ""
"インターネットの障害やDiscord側の特定の障害が発生した際、再接続を試みるかどうかを表します。不正な状態へ移行する可能性がある特定の切断(無効なシャーディングpayloadや不正なトークンなど)"
" は処理されません。"

#: hcord.ext.commands.Bot.connect:14 of
#, fuzzy
msgid ""
"If the gateway to connect to Discord is not found. Usually if this     is"
" thrown then there is a Discord API outage."
msgstr ""
":exc:`.GatewayNotFound` -- "
"Discordに接続するためのゲートウェイが見つからない。通常、これが発生した場合はDiscordAPIのエラーが考えられます。"

#: hcord.ext.commands.Bot.connect:15 of
#, fuzzy
msgid "The websocket connection has been terminated."
msgstr ":exc:`.ConnectionClosed` -- WebSocket接続は既に終了した。"

#: hcord.ext.commands.Bot.create_guild:3 of
msgid "Creates a :class:`.Guild`."
msgstr ":class:`.Guild` を作成します。"

#: hcord.ext.commands.Bot.create_guild:5 of
msgid "Bot accounts in more than 10 guilds are not allowed to create guilds."
msgstr "10以上のギルドに参加しているBotアカウントは、ギルドの作成ができません。"

#: hcord.ext.commands.Bot.create_guild:7 of
msgid "The name of the guild."
msgstr "ギルドの名前。"

#: hcord.ext.commands.Bot.create_guild:9 of
msgid ""
"The region for the voice communication server. Defaults to "
":attr:`.VoiceRegion.us_west`."
msgstr "音声通話に利用されるサーバーの地域。デフォルト値は  :attr:`.VoiceRegion.us_west` 。"

#: hcord.ext.commands.Bot.create_guild:12 of
msgid ""
"The :term:`py:bytes-like object` representing the icon. See "
":meth:`.ClientUser.edit` for more details on what is expected."
msgstr ""

#: hcord.ext.commands.Bot.create_guild:15 of
msgid "The code for a template to create the guild with.  .. versionadded:: 1.4"
msgstr ""

#: hcord.ext.commands.Bot.create_guild:15 of
msgid "The code for a template to create the guild with."
msgstr ""

#: hcord.ext.commands.Bot.create_guild:20 of
#, fuzzy
msgid "Guild creation failed."
msgstr ":exc:`.HTTPException` -- ギルドの作成に失敗した。"

#: hcord.ext.commands.Bot.create_guild:21 of
msgid "Invalid icon image format given. Must be PNG or JPG."
msgstr ""

#: hcord.ext.commands.Bot.create_guild:23 of
msgid "The guild created. This is not the same guild that is added to cache."
msgstr ""

#: hcord.ext.commands.Bot.create_guild:25
#: hcord.ext.commands.Bot.fetch_guild:21 of
msgid ":class:`.Guild`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Bot.delete_invite:3 of
msgid "Revokes an :class:`.Invite`, URL, or ID to an invite."
msgstr ":class:`.Invite` や、招待のURL、IDを削除します。"

#: hcord.ext.commands.Bot.delete_invite:5 of
msgid ""
"You must have the :attr:`~.Permissions.manage_channels` permission in the"
" associated guild to do this."
msgstr "これを行うには、関連付けられたGuildにて、 :attr:`~.Permissions.manage_channels` 権限が必要です。"

#: hcord.ext.commands.Bot.delete_invite:8 of
msgid "The invite to revoke."
msgstr "取り消す招待。"

#: hcord.ext.commands.Bot.delete_invite:11 of
#, fuzzy
msgid "You do not have permissions to revoke invites."
msgstr ":exc:`.Forbidden` -- 招待を取り消す権限が無い。"

#: hcord.ext.commands.Bot.delete_invite:12 of
#, fuzzy
msgid "The invite is invalid or expired."
msgstr ":exc:`.NotFound` -- 招待が無効、あるいは期限切れになっている。"

#: hcord.ext.commands.Bot.delete_invite:13 of
#, fuzzy
msgid "Revoking the invite failed."
msgstr ":exc:`.HTTPException` -- 招待の取り消しに失敗した。"

#: hcord.ext.commands.Bot.emojis:1 of
#, fuzzy
msgid "The emojis that the connected client has."
msgstr "List[:class:`.Emoji`] -- 接続したクライアントがアクセスできる絵文字。"

#: hcord.ext.commands.Bot.emojis:3 of
#, fuzzy
msgid "List[:class:`.Emoji`]"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Bot.event:1 of
msgid "A decorator that registers an event to listen to."
msgstr "リッスンするイベントを登録するデコレータ。"

#: hcord.ext.commands.Bot.event:3 of
msgid ""
"You can find more info about the events on the :ref:`documentation below "
"<discord-api-events>`."
msgstr "イベントの詳細については :ref:`以下のドキュメント <discord-api-events>` を参照してください。"

#: hcord.ext.commands.Bot.event:5 of
msgid ""
"The events must be a :ref:`coroutine <coroutine>`, if not, "
":exc:`TypeError` is raised."
msgstr "イベントは :ref:`コルーチン <coroutine>` でなければいけません。違う場合は :exc:`TypeError` が発生します。"

#: hcord.ext.commands.Bot.extensions:1 of
msgid "A read-only mapping of extension name to extension."
msgstr ""

#: hcord.ext.commands.Bot.extensions:3 of
msgid "Mapping[:class:`str`, :class:`py:types.ModuleType`]"
msgstr ""

#: hcord.ext.commands.Bot.fetch_channel:3 of
msgid ""
"Retrieves a :class:`.abc.GuildChannel` or :class:`.abc.PrivateChannel` "
"with the specified ID."
msgstr ""

#: hcord.ext.commands.Bot.fetch_channel:7 of
msgid ""
"This method is an API call. For general usage, consider "
":meth:`get_channel` instead."
msgstr ""

#: hcord.ext.commands.Bot.fetch_channel:11 of
msgid "An unknown channel type was received from hcord."
msgstr ""

#: hcord.ext.commands.Bot.fetch_channel:12 of
#, fuzzy
msgid "Retrieving the channel failed."
msgstr ":exc:`.HTTPException` -- チャンネルの取得に失敗した。"

#: hcord.ext.commands.Bot.fetch_channel:13 of
msgid "Invalid Channel ID."
msgstr ""

#: hcord.ext.commands.Bot.fetch_channel:14 of
#, fuzzy
msgid "You do not have permission to fetch this channel."
msgstr ":exc:`.Forbidden` -- 指定のチャンネルを取得する権限がない。"

#: hcord.ext.commands.Bot.fetch_channel:16 of
msgid "The channel from the ID."
msgstr "IDから取得したチャンネル。"

#: hcord.ext.commands.Bot.fetch_channel:17 of
msgid "Union[:class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`]"
msgstr "Union[ :class:`.abc.GuildChannel` , :class:`.abc.PrivateChannel` ]"

#: hcord.ext.commands.Bot.fetch_guild:3 of
msgid "Retrieves a :class:`.Guild` from an ID."
msgstr "IDから :class:`.Guild` を取得します。"

#: hcord.ext.commands.Bot.fetch_guild:7 of
#, fuzzy
msgid ""
"Using this, you will **not** receive :attr:`.Guild.channels`, "
":attr:`.Guild.members`, :attr:`.Member.activity` and "
":attr:`.Member.voice` per :class:`.Member`."
msgstr ""
"これを使用した場合、 :attr:`.Guild.channels` 、 :class:`.Guild.members` 、そして各 "
":class:`.Member` ごとの :attr:`.Member.activity` 、 :attr:`.Member.voice` "
"を取得することは **できません** 。"

#: hcord.ext.commands.Bot.fetch_guild:12 of
msgid ""
"This method is an API call. For general usage, consider :meth:`get_guild`"
" instead."
msgstr "このメソッドはAPIを呼び出します。通常は :meth:`get_guild` を代わりとして使用してください。"

#: hcord.ext.commands.Bot.fetch_guild:14 of
msgid "The guild's ID to fetch from."
msgstr "取得したいギルドのID。"

#: hcord.ext.commands.Bot.fetch_guild:17 of
#, fuzzy
msgid "You do not have access to the guild."
msgstr ":exc:`.Forbidden` -- ギルドにアクセスできない。"

#: hcord.ext.commands.Bot.fetch_guild:18 of
#, fuzzy
msgid "Getting the guild failed."
msgstr ":exc:`.HTTPException` -- ギルドの取得に失敗した。"

#: hcord.ext.commands.Bot.fetch_guild:20 of
msgid "The guild from the ID."
msgstr "IDから取得したギルド。"

#: hcord.ext.commands.Bot.fetch_guilds:3 of
msgid "Retrieves an :class:`.AsyncIterator` that enables receiving your guilds."
msgstr "Botが所属するGuildを取得できる、 :class:`AsyncIterator` を取得します。"

#: hcord.ext.commands.Bot.fetch_guilds:7 of
msgid ""
"Using this, you will only receive :attr:`.Guild.owner`, "
":attr:`.Guild.icon`, :attr:`.Guild.id`, and :attr:`.Guild.name` per "
":class:`.Guild`."
msgstr ""
"これを使った場合、各 :class:`Guild` の :attr:`Guild.owner` 、 :attr:`Guild.icon` 、 "
":attr:`Guild.id` 、 :attr:`Guild.name` のみ取得できます。"

#: hcord.ext.commands.Bot.fetch_guilds:12 of
msgid ""
"This method is an API call. For general usage, consider :attr:`guilds` "
"instead."
msgstr "これはAPIを呼び出します。通常は :attr:`guilds` を代わりに使用してください。"

#: hcord.ext.commands.Bot.fetch_guilds:15
#: hcord.ext.commands.Bot.wait_for:22 hcord.ext.commands.Context.history:6
#: hcord.ext.commands.check:37 hcord.ext.commands.check_any:20 of
msgid "Examples"
msgstr "例"

#: hcord.ext.commands.Bot.fetch_guilds:16
#: hcord.ext.commands.Context.history:7 of
msgid "Usage ::"
msgstr "使い方 ::"

#: hcord.ext.commands.Bot.fetch_guilds:21 of
msgid "Flattening into a list ::"
msgstr "リストへフラット化 ::"

#: hcord.ext.commands.Bot.fetch_guilds:26
#: hcord.ext.commands.Context.history:19 of
msgid "All parameters are optional."
msgstr "すべてのパラメータがオプションです。"

#: hcord.ext.commands.Bot.fetch_guilds:28 of
#, fuzzy
msgid ""
"The number of guilds to retrieve. If ``None``, it retrieves every guild "
"you have access to. Note, however, that this would make it a slow "
"operation. Defaults to ``100``."
msgstr ""
"取得するギルドの数。 ``None`` "
"の場合、あなたがアクセスできるギルドすべてを取得します。ただし、これには時間がかかります。デフォルトは100です。"

#: hcord.ext.commands.Bot.fetch_guilds:33 of
msgid ""
"Retrieves guilds before this date or object. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""
"この日付またはオブジェクトの前のGuildを取得します。もし日付が与えられた場合は、それはUTC時刻を表し、timezone "
"naiveであるdatetimeでないといけません。"

#: hcord.ext.commands.Bot.fetch_guilds:36 of
msgid ""
"Retrieve guilds after this date or object. If a date is provided it must "
"be a timezone-naive datetime representing UTC time."
msgstr ""
"この日付またはオブジェクトの後のGuildを取得します。もし日付が与えられた場合は、それはUTC時刻を表し、timezone "
"naiveであるdatetimeでないといけません。"

#: hcord.ext.commands.Bot.fetch_guilds:40 of
#, fuzzy
msgid "Getting the guilds failed."
msgstr ":exc:`.HTTPException` -- ギルドの取得に失敗した。"

#: hcord.ext.commands.Bot.fetch_guilds
#: hcord.ext.commands.Bot.get_all_channels
#: hcord.ext.commands.Bot.get_all_members
#: hcord.ext.commands.Bot.walk_commands
#: hcord.ext.commands.Cog.walk_commands hcord.ext.commands.Context.history
#: hcord.ext.commands.Group.walk_commands
#: hcord.ext.commands.GroupMixin.walk_commands of
msgid "Yields"
msgstr "Yieldする値"

#: hcord.ext.commands.Bot.fetch_guilds:42 of
msgid ":class:`.Guild` -- The guild with the guild data parsed."
msgstr ":class:`.Guild` -- データを解析したGuild。"

#: hcord.ext.commands.Bot.fetch_invite:3 of
msgid "Gets an :class:`.Invite` from a hcord.gg URL or ID."
msgstr ""

#: hcord.ext.commands.Bot.fetch_invite:7 of
msgid ""
"If the invite is for a guild you have not joined, the guild and channel "
"attributes of the returned :class:`.Invite` will be "
":class:`.PartialInviteGuild` and :class:`.PartialInviteChannel` "
"respectively."
msgstr ""

#: hcord.ext.commands.Bot.fetch_invite:11 of
msgid "The Discord invite ID or URL (must be a hcord.gg URL)."
msgstr ""

#: hcord.ext.commands.Bot.fetch_invite:13 of
msgid ""
"Whether to include count information in the invite. This fills the "
":attr:`.Invite.approximate_member_count` and "
":attr:`.Invite.approximate_presence_count` fields."
msgstr ""

#: hcord.ext.commands.Bot.fetch_invite:18 of
msgid "The invite has expired or is invalid."
msgstr ""

#: hcord.ext.commands.Bot.fetch_invite:19 of
#, fuzzy
msgid "Getting the invite failed."
msgstr ":exc:`.HTTPException` -- 招待の取り消しに失敗した。"

#: hcord.ext.commands.Bot.fetch_invite:21 of
msgid "The invite from the URL/ID."
msgstr ""

#: hcord.ext.commands.Bot.fetch_invite:22 of
msgid ":class:`.Invite`"
msgstr ""

#: hcord.ext.commands.Bot.fetch_template:3 of
msgid "Gets a :class:`.Template` from a hcord.new URL or code."
msgstr ""

#: hcord.ext.commands.Bot.fetch_template:5 of
msgid "The Discord Template Code or URL (must be a hcord.new URL)."
msgstr ""

#: hcord.ext.commands.Bot.fetch_template:8 of
msgid "The template is invalid."
msgstr ""

#: hcord.ext.commands.Bot.fetch_template:9 of
msgid "Getting the template failed."
msgstr ""

#: hcord.ext.commands.Bot.fetch_template:11 of
#, fuzzy
msgid "The template from the URL/code."
msgstr "ギルドの名前。"

#: hcord.ext.commands.Bot.fetch_template:12 of
#, fuzzy
msgid ":class:`.Template`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Bot.fetch_user:3 of
msgid ""
"Retrieves a :class:`~hcord.User` based on their ID. This can only be "
"used by bot accounts. You do not have to share any guilds with the user "
"to get this information, however many operations do require that you do."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user:10 of
msgid ""
"This method is an API call. For general usage, consider :meth:`get_user` "
"instead."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user:12 of
msgid "The user's ID to fetch from."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user:15 of
msgid "A user with this ID does not exist."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user:16 of
msgid "Fetching the user failed."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user:18 of
msgid "The user you requested."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user:19 of
msgid ":class:`~hcord.User`"
msgstr ""

#: hcord.ext.commands.Bot.fetch_user_profile:3 of
msgid "Gets an arbitrary user's profile."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user_profile:7 of
msgid "This can only be used by non-bot accounts."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user_profile:9 of
msgid "The ID of the user to fetch their profile for."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user_profile:12 of
msgid "Not allowed to fetch profiles."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user_profile:13 of
msgid "Fetching the profile failed."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user_profile:15 of
msgid "The profile of the user."
msgstr ""

#: hcord.ext.commands.Bot.fetch_user_profile:16 of
msgid ":class:`.Profile`"
msgstr ""

#: hcord.ext.commands.Bot.fetch_webhook:3 of
msgid "Retrieves a :class:`.Webhook` with the specified ID."
msgstr ""

#: hcord.ext.commands.Bot.fetch_webhook:5 of
msgid "Retrieving the webhook failed."
msgstr ""

#: hcord.ext.commands.Bot.fetch_webhook:6 of
msgid "Invalid webhook ID."
msgstr ""

#: hcord.ext.commands.Bot.fetch_webhook:7 of
#, fuzzy
msgid "You do not have permission to fetch this webhook."
msgstr ":exc:`.Forbidden` -- 指定のチャンネルを取得する権限がない。"

#: hcord.ext.commands.Bot.fetch_webhook:9 of
msgid "The webhook you requested."
msgstr ""

#: hcord.ext.commands.Bot.fetch_webhook:10 of
msgid ":class:`.Webhook`"
msgstr ""

#: hcord.ext.commands.Bot.fetch_widget:3 of
msgid "Gets a :class:`.Widget` from a guild ID."
msgstr ""

#: hcord.ext.commands.Bot.fetch_widget:7 of
msgid "The guild must have the widget enabled to get this information."
msgstr ""

#: hcord.ext.commands.Bot.fetch_widget:9 of
msgid "The ID of the guild."
msgstr ""

#: hcord.ext.commands.Bot.fetch_widget:12 of
msgid "The widget for this guild is disabled."
msgstr ""

#: hcord.ext.commands.Bot.fetch_widget:13 of
msgid "Retrieving the widget failed."
msgstr ""

#: hcord.ext.commands.Bot.fetch_widget:15 of
msgid "The guild's widget."
msgstr ""

#: hcord.ext.commands.Bot.fetch_widget:16 of
msgid ":class:`.Widget`"
msgstr ""

#: hcord.ext.commands.Bot.get_all_channels:1 of
msgid ""
"A generator that retrieves every :class:`.abc.GuildChannel` the client "
"can 'access'."
msgstr ""

#: hcord.ext.commands.Bot.get_all_channels:3
#: hcord.ext.commands.Bot.get_all_members:3 of
msgid "This is equivalent to: ::"
msgstr ""

#: hcord.ext.commands.Bot.get_all_channels:11 of
msgid ""
"Just because you receive a :class:`.abc.GuildChannel` does not mean that "
"you can communicate in said channel. "
":meth:`.abc.GuildChannel.permissions_for` should be used for that."
msgstr ""

#: hcord.ext.commands.Bot.get_all_channels:15 of
msgid ":class:`.abc.GuildChannel` -- A channel the client can 'access'."
msgstr ""

#: hcord.ext.commands.Bot.get_all_members:1 of
msgid "Returns a generator with every :class:`.Member` the client can see."
msgstr ""

#: hcord.ext.commands.Bot.get_all_members:9 of
msgid ":class:`.Member` -- A member the client can see."
msgstr ""

#: hcord.ext.commands.Bot.get_channel:1 of
msgid "Returns a channel or thread with the given ID."
msgstr ""

#: hcord.ext.commands.Bot.get_channel:3 hcord.ext.commands.Bot.get_emoji:3
#: hcord.ext.commands.Bot.get_guild:3 hcord.ext.commands.Bot.get_user:3 of
#, fuzzy
msgid "The ID to search for."
msgstr "取得したいギルドのID。"

#: hcord.ext.commands.Bot.get_channel:6 of
msgid "The returned channel or ``None`` if not found."
msgstr ""

#: hcord.ext.commands.Bot.get_channel:7 of
#, fuzzy
msgid "Optional[Union[:class:`.abc.GuildChannel`, :class:`.Thread`, :class:`.abc.PrivateChannel`]]"
msgstr "Union[:class:`.abc.GuildChannel`, :class:`.Thread`, :class:`.abc.PrivateChannel`]"

#: hcord.ext.commands.Bot.get_cog:1 of
msgid "Gets the cog instance requested."
msgstr ""

#: hcord.ext.commands.Bot.get_cog:3 of
msgid "If the cog is not found, ``None`` is returned instead."
msgstr ""

#: hcord.ext.commands.Bot.get_cog:5 of
msgid ""
"The name of the cog you are requesting. This is equivalent to the name "
"passed via keyword argument in class creation or the class name if "
"unspecified."
msgstr ""

#: hcord.ext.commands.Bot.get_cog:10 of
msgid "The cog that was requested. If not found, returns ``None``."
msgstr ""

#: hcord.ext.commands.Bot.get_cog:11 hcord.ext.commands.Command:62
#: hcord.ext.commands.HelpCommand.cog:10 of
msgid "Optional[:class:`Cog`]"
msgstr ""

#: hcord.ext.commands.Bot.get_command:1
#: hcord.ext.commands.Group.get_command:1
#: hcord.ext.commands.GroupMixin.get_command:1 of
#, fuzzy
msgid "Get a :class:`.Command` from the internal list of commands."
msgstr ":class:`.Command`やそのサブクラスを内部のコマンドリストに追加します。"

#: hcord.ext.commands.Bot.get_command:4
#: hcord.ext.commands.Group.get_command:4
#: hcord.ext.commands.GroupMixin.get_command:4 of
msgid "This could also be used as a way to get aliases."
msgstr ""

#: hcord.ext.commands.Bot.get_command:6
#: hcord.ext.commands.Group.get_command:6
#: hcord.ext.commands.GroupMixin.get_command:6 of
msgid ""
"The name could be fully qualified (e.g. ``'foo bar'``) will get the "
"subcommand ``bar`` of the group command ``foo``. If a subcommand is not "
"found then ``None`` is returned just as usual."
msgstr ""

#: hcord.ext.commands.Bot.get_command:10
#: hcord.ext.commands.Group.get_command:10
#: hcord.ext.commands.GroupMixin.get_command:10 of
msgid "The name of the command to get."
msgstr ""

#: hcord.ext.commands.Bot.get_command:13
#: hcord.ext.commands.Group.get_command:13
#: hcord.ext.commands.GroupMixin.get_command:13 of
msgid "The command that was requested. If not found, returns ``None``."
msgstr ""

#: hcord.ext.commands.Bot.get_command:14 hcord.ext.commands.Command:56
#: hcord.ext.commands.Command:103 hcord.ext.commands.Command.root_parent:7
#: hcord.ext.commands.Group.get_command:14
#: hcord.ext.commands.Group.root_parent:7
#: hcord.ext.commands.GroupMixin.get_command:14 of
msgid "Optional[:class:`Command`]"
msgstr ""

#: hcord.ext.commands.Bot.get_context:3 of
msgid "Returns the invocation context from the message."
msgstr ""

#: hcord.ext.commands.Bot.get_context:5 of
msgid ""
"This is a more low-level counter-part for :meth:`.process_commands` to "
"allow users more fine grained control over the processing."
msgstr ""

#: hcord.ext.commands.Bot.get_context:8 of
msgid ""
"The returned context is not guaranteed to be a valid invocation context, "
":attr:`.Context.valid` must be checked to make sure it is. If the context"
" is not valid then it is not a valid candidate to be invoked under "
":meth:`~.Bot.invoke`."
msgstr ""

#: hcord.ext.commands.Bot.get_context:13 of
msgid "The message to get the invocation context from."
msgstr ""

#: hcord.ext.commands.Bot.get_context:15 of
msgid ""
"The factory class that will be used to create the context. By default, "
"this is :class:`.Context`. Should a custom class be provided, it must be "
"similar enough to :class:`.Context`\\'s interface."
msgstr ""

#: hcord.ext.commands.Bot.get_context:20 of
msgid ""
"The invocation context. The type of this can change via the ``cls`` "
"parameter."
msgstr ""

#: hcord.ext.commands.Bot.get_context:22 of
msgid ":class:`.Context`"
msgstr ""

#: hcord.ext.commands.Bot.get_emoji:1 of
msgid "Returns an emoji with the given ID."
msgstr ""

#: hcord.ext.commands.Bot.get_emoji:6 of
msgid "The custom emoji or ``None`` if not found."
msgstr ""

#: hcord.ext.commands.Bot.get_emoji:7 of
msgid "Optional[:class:`.Emoji`]"
msgstr ""

#: hcord.ext.commands.Bot.get_guild:1 of
msgid "Returns a guild with the given ID."
msgstr ""

#: hcord.ext.commands.Bot.get_guild:6 of
msgid "The guild or ``None`` if not found."
msgstr ""

#: hcord.ext.commands.Bot.get_guild:7 hcord.ext.commands.Context.guild:3 of
#, fuzzy
msgid "Optional[:class:`.Guild`]"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Bot.get_prefix:3 of
msgid ""
"Retrieves the prefix the bot is listening to with the message as a "
"context."
msgstr ""

#: hcord.ext.commands.Bot.get_prefix:6 of
msgid "The message context to get the prefix of."
msgstr ""

#: hcord.ext.commands.Bot.get_prefix:9 of
msgid "A list of prefixes or a single prefix that the bot is listening for."
msgstr ""

#: hcord.ext.commands.Bot.get_prefix:11 of
msgid "Union[List[:class:`str`], :class:`str`]"
msgstr ""

#: hcord.ext.commands.Bot.get_user:1 of
msgid "Returns a user with the given ID."
msgstr ""

#: hcord.ext.commands.Bot.get_user:6 of
msgid "The user or ``None`` if not found."
msgstr ""

#: hcord.ext.commands.Bot.get_user:7 of
msgid "Optional[:class:`~hcord.User`]"
msgstr ""

#: hcord.ext.commands.Bot.group:1 hcord.ext.commands.Group.group:1
#: hcord.ext.commands.GroupMixin.group:1 of
msgid ""
"A shortcut decorator that invokes :func:`.group` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: hcord.ext.commands.Bot.group:4 hcord.ext.commands.Group.group:4
#: hcord.ext.commands.GroupMixin.group:4 of
msgid ""
"A decorator that converts the provided method into a Group, adds it to "
"the bot, then returns it."
msgstr ""

#: hcord.ext.commands.Bot.group:5 hcord.ext.commands.Group.group:5
#: hcord.ext.commands.GroupMixin.group:5 of
msgid "Callable[..., :class:`Group`]"
msgstr ""

#: hcord.ext.commands.Bot.guilds:1 of
msgid "The guilds that the connected client is a member of."
msgstr ""

#: hcord.ext.commands.Bot.guilds:3 of
#, fuzzy
msgid "List[:class:`.Guild`]"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Bot.intents:1 of
msgid "The intents configured for this connection."
msgstr ""

#: hcord.ext.commands.Bot.intents:5 of
#, fuzzy
msgid ":class:`Intents`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Bot.invoke:3 of
msgid ""
"Invokes the command given under the invocation context and handles all "
"the internal event dispatch mechanisms."
msgstr ""

#: hcord.ext.commands.Bot.invoke:6 of
msgid "The invocation context to invoke."
msgstr ""

#: hcord.ext.commands.Bot.is_closed:1 of
msgid ":class:`bool`: Indicates if the websocket connection is closed."
msgstr ""

#: hcord.ext.commands.Bot.is_owner:3 of
msgid ""
"Checks if a :class:`~hcord.User` or :class:`~hcord.Member` is the "
"owner of this bot."
msgstr ""

#: hcord.ext.commands.Bot.is_owner:6 of
msgid ""
"If an :attr:`owner_id` is not set, it is fetched automatically through "
"the use of :meth:`~.Bot.application_info`."
msgstr ""

#: hcord.ext.commands.Bot.is_owner:9 of
msgid ""
"The function also checks if the application is team-owned if "
":attr:`owner_ids` is not set."
msgstr ""

#: hcord.ext.commands.Bot.is_owner:13 of
msgid "The user to check for."
msgstr ""

#: hcord.ext.commands.Bot.is_owner:16 of
msgid "Whether the user is the owner."
msgstr ""

#: hcord.ext.commands.Bot.is_ready:1 of
msgid ":class:`bool`: Specifies if the client's internal cache is ready for use."
msgstr ""

#: hcord.ext.commands.Bot.latency:1 of
msgid "Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds."
msgstr ""

#: hcord.ext.commands.Bot.latency:3 of
msgid "This could be referred to as the Discord WebSocket protocol latency."
msgstr ""

#: hcord.ext.commands.Bot.latency:5
#: hcord.ext.commands.Command.get_cooldown_retry_after:10
#: hcord.ext.commands.CommandOnCooldown:16
#: hcord.ext.commands.Group.get_cooldown_retry_after:10 of
#, fuzzy
msgid ":class:`float`"
msgstr ":class:`.AppInfo`"

#: hcord.ext.commands.Bot.listen:1 of
msgid ""
"A decorator that registers another function as an external event "
"listener. Basically this allows you to listen to multiple events from "
"different places e.g. such as :func:`.on_ready`"
msgstr ""

#: hcord.ext.commands.Bot.listen:5 of
msgid "The functions being listened to must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: hcord.ext.commands.Bot.listen:21 of
msgid "Would print one and two in an unspecified order."
msgstr ""

#: hcord.ext.commands.Bot.listen:23 of
#, fuzzy
msgid "The function being listened to is not a coroutine."
msgstr ":exc:`TypeError` -- 渡された関数がコルーチンでない。"

#: hcord.ext.commands.Bot.load_extension:1 of
msgid "Loads an extension."
msgstr ""

#: hcord.ext.commands.Bot.load_extension:3 of
msgid ""
"An extension is a python module that contains commands, cogs, or "
"listeners."
msgstr ""

#: hcord.ext.commands.Bot.load_extension:6 of
msgid ""
"An extension must have a global function, ``setup`` defined as the entry "
"point on what to do when the extension is loaded. This entry point must "
"have a single argument, the ``bot``."
msgstr ""

#: hcord.ext.commands.Bot.load_extension:10 of
msgid ""
"The extension name to load. It must be dot separated like regular Python "
"imports if accessing a sub-module. e.g. ``foo.test`` if you want to "
"import ``foo/test.py``."
msgstr ""

#: hcord.ext.commands.Bot.load_extension:15
#: hcord.ext.commands.Bot.reload_extension:14 of
msgid "The extension could not be imported."
msgstr ""

#: hcord.ext.commands.Bot.load_extension:16 of
msgid "The extension is already loaded."
msgstr ""

#: hcord.ext.commands.Bot.load_extension:17
#: hcord.ext.commands.Bot.reload_extension:15 of
msgid "The extension does not have a setup function."
msgstr ""

#: hcord.ext.commands.Bot.load_extension:18 of
msgid "The extension or its setup function had an execution error."
msgstr ""

#: hcord.ext.commands.Bot.login:3 of
msgid "Logs in the client with the specified credentials."
msgstr ""

#: hcord.ext.commands.Bot.login:5 of
msgid "This function can be used in two different ways."
msgstr ""

#: hcord.ext.commands.Bot.login:9 of
msgid ""
"Logging on with a user token is against the Discord `Terms of Service "
"<https://support.hcord.com/hc/en-us/articles/115002192352>`_ and doing "
"so might potentially get your account banned. Use this at your own risk."
msgstr ""

#: hcord.ext.commands.Bot.login:14 of
msgid ""
"The authentication token. Do not prefix this token with anything as the "
"library will do it for you."
msgstr ""

#: hcord.ext.commands.Bot.login:17 of
msgid ""
"Keyword argument that specifies if the account logging on is a bot token "
"or not."
msgstr ""

#: hcord.ext.commands.Bot.login:21 of
msgid "The wrong credentials are passed."
msgstr ""

#: hcord.ext.commands.Bot.login:22 of
msgid ""
"An unknown HTTP related error occurred,     usually when it isn't 200 or "
"the known incorrect credentials     passing status code."
msgstr ""

#: hcord.ext.commands.Bot.logout:3 of
msgid "Logs out of Discord and closes all connections."
msgstr ""

#: hcord.ext.commands.Bot.logout:7 of
msgid ""
"This is just an alias to :meth:`close`. If you want to do extraneous "
"cleanup when subclassing, it is suggested to override :meth:`close` "
"instead."
msgstr ""

#: hcord.ext.commands.Bot.on_command_error:3 of
msgid "The default command error handler provided by the bot."
msgstr ""

#: hcord.ext.commands.Bot.on_command_error:5 of
msgid ""
"By default this prints to :data:`sys.stderr` however it could be "
"overridden to have a different implementation."
msgstr ""

#: hcord.ext.commands.Bot.on_command_error:8 of
msgid "This only fires if you do not specify any listeners for command error."
msgstr ""

#: hcord.ext.commands.Bot.on_error:3 of
msgid "The default error handler provided by the client."
msgstr ""

#: hcord.ext.commands.Bot.on_error:5 of
msgid ""
"By default this prints to :data:`sys.stderr` however it could be "
"overridden to have a different implementation. Check "
":func:`~hcord.on_error` for more details."
msgstr ""

#: hcord.ext.commands.Bot.private_channels:1 of
msgid "The private channels that the connected client is participating on."
msgstr ""

#: hcord.ext.commands.Bot.private_channels:5 of
msgid ""
"This returns only up to 128 most recent private channels due to an "
"internal working on how Discord deals with private channels."
msgstr ""

#: hcord.ext.commands.Bot.private_channels:8 of
msgid "List[:class:`.abc.PrivateChannel`]"
msgstr ""

#: hcord.ext.commands.Bot.process_commands:3 of
msgid ""
"This function processes the commands that have been registered to the bot"
" and other groups. Without this coroutine, none of the commands will be "
"triggered."
msgstr ""

#: hcord.ext.commands.Bot.process_commands:7 of
msgid ""
"By default, this coroutine is called inside the :func:`.on_message` "
"event. If you choose to override the :func:`.on_message` event, then you "
"should invoke this coroutine as well."
msgstr ""

#: hcord.ext.commands.Bot.process_commands:11 of
msgid ""
"This is built using other low level tools, and is equivalent to a call to"
" :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`."
msgstr ""

#: hcord.ext.commands.Bot.process_commands:14 of
msgid ""
"This also checks if the message's author is a bot and doesn't call "
":meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so."
msgstr ""

#: hcord.ext.commands.Bot.process_commands:17 of
msgid "The message to process commands for."
msgstr ""

#: hcord.ext.commands.Bot.reload_extension:1 of
msgid "Atomically reloads an extension."
msgstr ""

#: hcord.ext.commands.Bot.reload_extension:3 of
msgid ""
"This replaces the extension with the same extension, only refreshed. This"
" is equivalent to a :meth:`unload_extension` followed by a "
":meth:`load_extension` except done in an atomic way. That is, if an "
"operation fails mid-reload then the bot will roll-back to the prior "
"working state."
msgstr ""

#: hcord.ext.commands.Bot.reload_extension:8 of
msgid ""
"The extension name to reload. It must be dot separated like regular "
"Python imports if accessing a sub-module. e.g. ``foo.test`` if you want "
"to import ``foo/test.py``."
msgstr ""

#: hcord.ext.commands.Bot.reload_extension:13
#: hcord.ext.commands.Bot.unload_extension:16 of
msgid "The extension was not loaded."
msgstr ""

#: hcord.ext.commands.Bot.reload_extension:16 of
msgid "The extension setup function had an execution error."
msgstr ""

#: hcord.ext.commands.Bot.remove_check:1 of
msgid "Removes a global check from the bot."
msgstr ""

#: hcord.ext.commands.Bot.remove_check:3 of
msgid ""
"This function is idempotent and will not raise an exception if the "
"function is not in the global checks."
msgstr ""

#: hcord.ext.commands.Bot.remove_check:6 of
msgid "The function to remove from the global checks."
msgstr ""

#: hcord.ext.commands.Bot.remove_check:7 of
msgid ""
"If the function was added with ``call_once=True`` in the "
":meth:`.Bot.add_check` call or using :meth:`.check_once`."
msgstr ""

#: hcord.ext.commands.Bot.remove_cog:1 of
msgid "Removes a cog from the bot."
msgstr ""

#: hcord.ext.commands.Bot.remove_cog:3 of
msgid ""
"All registered commands and event listeners that the cog has registered "
"will be removed as well."
msgstr ""

#: hcord.ext.commands.Bot.remove_cog:6 of
msgid "If no cog is found then this method has no effect."
msgstr ""

#: hcord.ext.commands.Bot.remove_cog:8 of
msgid "The name of the cog to remove."
msgstr ""

#: hcord.ext.commands.Bot.remove_command:1
#: hcord.ext.commands.Group.remove_command:1
#: hcord.ext.commands.GroupMixin.remove_command:1 of
#, fuzzy
msgid "Remove a :class:`.Command` from the internal list of commands."
msgstr ":class:`.Command`やそのサブクラスを内部のコマンドリストに追加します。"

#: hcord.ext.commands.Bot.remove_command:4
#: hcord.ext.commands.Group.remove_command:4
#: hcord.ext.commands.GroupMixin.remove_command:4 of
msgid "This could also be used as a way to remove aliases."
msgstr ""

#: hcord.ext.commands.Bot.remove_command:6
#: hcord.ext.commands.Group.remove_command:6
#: hcord.ext.commands.GroupMixin.remove_command:6 of
msgid "The name of the command to remove."
msgstr ""

#: hcord.ext.commands.Bot.remove_command:9
#: hcord.ext.commands.Group.remove_command:9
#: hcord.ext.commands.GroupMixin.remove_command:9 of
msgid ""
"The command that was removed. If the name is not valid then ``None`` is "
"returned instead."
msgstr ""

#: hcord.ext.commands.Bot.remove_command:11
#: hcord.ext.commands.Group.remove_command:11
#: hcord.ext.commands.GroupMixin.remove_command:11 of
msgid "Optional[:class:`.Command`]"
msgstr ""

#: hcord.ext.commands.Bot.remove_listener:1 of
msgid "Removes a listener from the pool of listeners."
msgstr ""

#: hcord.ext.commands.Bot.remove_listener:3 of
msgid "The function that was used as a listener to remove."
msgstr ""

#: hcord.ext.commands.Bot.remove_listener:4 of
msgid "The name of the event we want to remove. Defaults to ``func.__name__``."
msgstr "削除したいイベントの名前。デフォルトでは ``func.__name__`` です。"

#: hcord.ext.commands.Bot.request_offline_members:3 of
msgid ""
"Requests previously offline members from the guild to be filled up into "
"the :attr:`.Guild.members` cache. This function is usually not called. It"
" should only be used if you have the ``fetch_offline_members`` parameter "
"set to ``False``."
msgstr ""

#: hcord.ext.commands.Bot.request_offline_members:8 of
msgid ""
"When the client logs on and connects to the websocket, Discord does not "
"provide the library with offline members if the number of members in the "
"guild is larger than 250. You can check if a guild is large if "
":attr:`.Guild.large` is ``True``."
msgstr ""

#: hcord.ext.commands.Bot.request_offline_members:15 of
#, fuzzy
msgid "This method is deprecated. Use :meth:`Guild.chunk` instead."
msgstr "このメソッドはAPIを呼び出します。通常は :meth:`get_guild` を代わりとして使用してください。"

#: hcord.ext.commands.Bot.request_offline_members:17 of
msgid "An argument list of guilds to request offline members for."
msgstr ""

#: hcord.ext.commands.Bot.request_offline_members:20 of
msgid "If any guild is unavailable in the collection."
msgstr ""

#: hcord.ext.commands.Bot.run:1 of
msgid ""
"A blocking call that abstracts away the event loop initialisation from "
"you."
msgstr ""

#: hcord.ext.commands.Bot.run:4 of
msgid ""
"If you want more control over the event loop then this function should "
"not be used. Use :meth:`start` coroutine or :meth:`connect` + "
":meth:`login`."
msgstr ""

#: hcord.ext.commands.Bot.run:8 of
msgid "Roughly Equivalent to: ::"
msgstr ""

#: hcord.ext.commands.Bot.run:20 of
msgid ""
"This function must be the last function to call due to the fact that it "
"is blocking. That means that registration of events or anything being "
"called after this function call will not execute until it returns."
msgstr ""

#: hcord.ext.commands.Bot.start:3 of
msgid "A shorthand coroutine for :meth:`login` + :meth:`connect`."
msgstr ""

#: hcord.ext.commands.Bot.start:5 of
msgid "An unexpected keyword argument was received."
msgstr ""

#: hcord.ext.commands.Bot.unload_extension:1 of
msgid "Unloads an extension."
msgstr ""

#: hcord.ext.commands.Bot.unload_extension:3 of
msgid ""
"When the extension is unloaded, all commands, listeners, and cogs are "
"removed from the bot and the module is un-imported."
msgstr ""

#: hcord.ext.commands.Bot.unload_extension:6 of
msgid ""
"The extension can provide an optional global function, ``teardown``, to "
"do miscellaneous clean-up if necessary. This function takes a single "
"parameter, the ``bot``, similar to ``setup`` from "
":meth:`~.Bot.load_extension`."
msgstr ""

#: hcord.ext.commands.Bot.unload_extension:11 of
msgid ""
"The extension name to unload. It must be dot separated like regular "
"Python imports if accessing a sub-module. e.g. ``foo.test`` if you want "
"to import ``foo/test.py``."
msgstr ""

#: hcord.ext.commands.Bot.user:1 of
msgid "Represents the connected client. ``None`` if not logged in."
msgstr ""

#: hcord.ext.commands.Bot.user:3 of
msgid "Optional[:class:`.ClientUser`]"
msgstr ""

#: hcord.ext.commands.Bot.users:1 of
msgid "Returns a list of all the users the bot can see."
msgstr ""

#: hcord.ext.commands.Bot.users:3 of
msgid "List[:class:`~hcord.User`]"
msgstr ""

#: hcord.ext.commands.Bot.voice_clients:1 of
msgid "Represents a list of voice connections."
msgstr ""

#: hcord.ext.commands.Bot.voice_clients:3 of
msgid "These are usually :class:`.VoiceClient` instances."
msgstr ""

#: hcord.ext.commands.Bot.voice_clients:5 of
msgid "List[:class:`.VoiceProtocol`]"
msgstr ""

#: hcord.ext.commands.Bot.wait_for:3 of
msgid "Waits for a WebSocket event to be dispatched."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:5 of
msgid ""
"This could be used to wait for a user to reply to a message, or to react "
"to a message, or to edit a message in a self-contained way."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:9 of
msgid ""
"The ``timeout`` parameter is passed onto :func:`asyncio.wait_for`. By "
"default, it does not timeout. Note that this does propagate the "
":exc:`asyncio.TimeoutError` for you in case of timeout and is provided "
"for ease of use."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:14 of
msgid ""
"In case the event returns multiple arguments, a :class:`tuple` containing"
" those arguments is returned instead. Please check the "
":ref:`documentation <discord-api-events>` for a list of events and their "
"parameters."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:19 of
msgid "This function returns the **first event that meets the requirements**."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:23 of
msgid "Waiting for a user reply: ::"
msgstr ""

#: hcord.ext.commands.Bot.wait_for:37 of
msgid "Waiting for a thumbs up reaction from the message author: ::"
msgstr ""

#: hcord.ext.commands.Bot.wait_for:55 of
msgid ""
"The event name, similar to the :ref:`event reference <discord-api-"
"events>`, but without the ``on_`` prefix, to wait for."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:58 of
msgid ""
"A predicate to check what to wait for. The arguments must meet the "
"parameters of the event being waited for."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:61 of
msgid ""
"The number of seconds to wait before timing out and raising "
":exc:`asyncio.TimeoutError`."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:65 of
msgid "If a timeout is provided and it was reached."
msgstr ""

#: hcord.ext.commands.Bot.wait_for:67 of
msgid ""
"Returns no arguments, a single argument, or a :class:`tuple` of multiple "
"arguments that mirrors the parameters passed in the :ref:`event reference"
" <discord-api-events>`."
msgstr ""

#: hcord.ext.commands.Bot.wait_until_ready:3 of
msgid "Waits until the client's internal cache is all ready."
msgstr ""

#: hcord.ext.commands.Bot.walk_commands:1
#: hcord.ext.commands.Group.walk_commands:1
#: hcord.ext.commands.GroupMixin.walk_commands:1 of
msgid "An iterator that recursively walks through all commands and subcommands."
msgstr ""

#: hcord.ext.commands.Bot.walk_commands:3
#: hcord.ext.commands.Group.walk_commands:3
#: hcord.ext.commands.GroupMixin.walk_commands:3 of
msgid "Duplicates due to aliases are no longer returned"
msgstr ""

#: hcord.ext.commands.Bot.walk_commands:6
#: hcord.ext.commands.Group.walk_commands:6
#: hcord.ext.commands.GroupMixin.walk_commands:6 of
#, fuzzy
msgid ""
"Union[:class:`.Command`, :class:`.Group`] -- A command or group from the "
"internal list of commands."
msgstr ":class:`.Command`やそのサブクラスを内部のコマンドリストに追加します。"

#: hcord.ext.commands.AutoShardedBot:1 of
msgid ""
"This is similar to :class:`.Bot` except that it is inherited from "
":class:`hcord.AutoShardedClient` instead."
msgstr ""

#: hcord.ext.commands.when_mentioned:1 of
msgid "A callable that implements a command prefix equivalent to being mentioned."
msgstr ""

#: hcord.ext.commands.when_mentioned:3
#: hcord.ext.commands.when_mentioned_or:3 of
msgid ""
"These are meant to be passed into the :attr:`.Bot.command_prefix` "
"attribute."
msgstr ""

#: hcord.ext.commands.when_mentioned_or:1 of
msgid "A callable that implements when mentioned or other prefixes provided."
msgstr ""

#: hcord.ext.commands.when_mentioned_or:13 of
msgid ""
"This callable returns another callable, so if this is done inside a "
"custom callable, you must call the returned callable, for example:"
msgstr ""

#: hcord.ext.commands.when_mentioned_or:23 of
msgid ":func:`.when_mentioned`"
msgstr ""

#: ../../ext/commands/api.rst:27
msgid "Event Reference"
msgstr "イベントリファレンス"

#: ../../ext/commands/api.rst:29
msgid ""
"These events function similar to :ref:`the regular events <discord-api-"
"events>`, except they are custom to the command extension module."
msgstr ""

#: ../../ext/commands/api.rst:34
msgid ""
"An error handler that is called when an error is raised inside a command "
"either through user input error, check failure, or an error in your own "
"code."
msgstr ""

#: ../../ext/commands/api.rst:38
msgid "A default one is provided (:meth:`.Bot.on_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:40 ../../ext/commands/api.rst:52
#: ../../ext/commands/api.rst:62 hcord.ext.commands.Cog.cog_after_invoke:7
#: hcord.ext.commands.Cog.cog_before_invoke:7
#: hcord.ext.commands.HelpCommand.on_help_command_error:11
#: hcord.ext.commands.HelpCommand.prepare_help_command:15 of
msgid "The invocation context."
msgstr ""

#: ../../ext/commands/api.rst:42
#: hcord.ext.commands.HelpCommand.on_help_command_error:13 of
msgid "The error that was raised."
msgstr ""

#: ../../ext/commands/api.rst:47
msgid ""
"An event that is called when a command is found and is about to be "
"invoked."
msgstr ""

#: ../../ext/commands/api.rst:49
msgid ""
"This event is called regardless of whether the command itself succeeds "
"via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:57
msgid "An event that is called when a command has completed its invocation."
msgstr ""

#: ../../ext/commands/api.rst:59
msgid ""
"This event is called only if the command succeeded, i.e. all checks have "
"passed and the user input it correctly."
msgstr ""

#: ../../ext/commands/api.rst:68
msgid "Command"
msgstr "Command"

#: hcord.ext.commands.command:1 of
msgid ""
"A decorator that transforms a function into a :class:`.Command` or if "
"called with :func:`.group`, :class:`.Group`."
msgstr ""

#: hcord.ext.commands.command:4 of
msgid ""
"By default the ``help`` attribute is received automatically from the "
"docstring of the function and is cleaned up with the use of "
"``inspect.cleandoc``. If the docstring is ``bytes``, then it is decoded "
"into :class:`str` using utf-8 encoding."
msgstr ""

#: hcord.ext.commands.command:9 of
msgid ""
"All checks added using the :func:`.check` & co. decorators are added into"
" the function. There is no way to supply your own checks through this "
"decorator."
msgstr ""

#: hcord.ext.commands.command:13 of
msgid ""
"The name to create the command with. By default this uses the function "
"name unchanged."
msgstr ""

#: hcord.ext.commands.command:16 of
msgid ""
"The class to construct with. By default this is :class:`.Command`. You "
"usually do not change this."
msgstr ""

#: hcord.ext.commands.command:18 of
msgid ""
"Keyword arguments to pass into the construction of the class denoted by "
"``cls``."
msgstr ""

#: hcord.ext.commands.command:21 of
msgid "If the function is not a coroutine or is already a command."
msgstr ""

#: hcord.ext.commands.group:1 of
msgid "A decorator that transforms a function into a :class:`.Group`."
msgstr ""

#: hcord.ext.commands.group:3 of
msgid ""
"This is similar to the :func:`.command` decorator but the ``cls`` "
"parameter is set to :class:`Group` by default."
msgstr ""

#: hcord.ext.commands.group:6 of
msgid "The ``cls`` parameter can now be passed."
msgstr ""

#: hcord.ext.commands.Command:1 of
msgid "A class that implements the protocol for a bot text command."
msgstr ""

#: hcord.ext.commands.Command:3 of
msgid ""
"These are not created manually, instead they are created via the "
"decorator or functional interface."
msgstr ""

#: hcord.ext.commands.Command:8 of
#, fuzzy
msgid "The name of the command."
msgstr "ギルドの名前。"

#: hcord.ext.commands.Command:14 of
#, fuzzy
msgid "The coroutine that is executed when the command is called."
msgstr "呼び出そうとしたコマンドが無効化されていた際に発生する例外。"

#: hcord.ext.commands.Command:16 of
msgid ":ref:`coroutine <coroutine>`"
msgstr ""

#: hcord.ext.commands.Command:20 of
msgid "The long help text for the command."
msgstr ""

#: hcord.ext.commands.Command:26 of
msgid "The short help text for the command."
msgstr ""

#: hcord.ext.commands.Command:28 hcord.ext.commands.Command.cog_name:3
#: hcord.ext.commands.Context:70 hcord.ext.commands.Group.cog_name:3 of
msgid "Optional[:class:`str`]"
msgstr ""

#: hcord.ext.commands.Command:32 of
msgid "A replacement for arguments in the default help text."
msgstr ""

#: hcord.ext.commands.Command:38 of
msgid "The list of aliases the command can be invoked under."
msgstr ""

#: hcord.ext.commands.Command:40 of
msgid "Union[List[:class:`str`], Tuple[:class:`str`]]"
msgstr ""

#: hcord.ext.commands.Command:44 of
msgid ""
"A boolean that indicates if the command is currently enabled. If the "
"command is invoked while it is disabled, then :exc:`.DisabledCommand` is "
"raised to the :func:`.on_command_error` event. Defaults to ``True``."
msgstr ""

#: hcord.ext.commands.Command:53 of
msgid ""
"The parent command that this command belongs to. ``None`` if there isn't "
"one."
msgstr ""

#: hcord.ext.commands.Command:60 of
msgid "The cog that this command belongs to. ``None`` if there isn't one."
msgstr ""

#: hcord.ext.commands.Command:66 of
msgid ""
"A list of predicates that verifies if the command could be executed with "
"the given :class:`.Context` as the sole parameter. If an exception is "
"necessary to be thrown to signal failure, then one inherited from "
":exc:`.CommandError` should be used. Note that if the checks fail then "
":exc:`.CheckFailure` exception is raised to the :func:`.on_command_error`"
" event."
msgstr ""

#: hcord.ext.commands.Command:73 of
msgid "List[Callable[..., :class:`bool`]]"
msgstr ""

#: hcord.ext.commands.Command:77 of
#, fuzzy
msgid "The message prefixed into the default help command."
msgstr ":class:`str` -- この属性に入力されたテキストは、デフォルトのヘルプメッセージの先頭に表示されます。"

#: hcord.ext.commands.Command:83 of
msgid ""
"If ``True``\\, the default help command does not show this in the help "
"output."
msgstr ""

#: hcord.ext.commands.Command:90 of
msgid ""
"If ``False`` and a keyword-only argument is provided then the keyword "
"only argument is stripped and handled as if it was a regular argument "
"that handles :exc:`.MissingRequiredArgument` and default values in a "
"regular matter rather than passing the rest completely raw. If ``True`` "
"then the keyword-only argument will pass in the rest of the arguments in "
"a completely raw matter. Defaults to ``False``."
msgstr ""

#: hcord.ext.commands.Command:101 of
msgid "The subcommand that was invoked, if any."
msgstr ""

#: hcord.ext.commands.Command:107 of
msgid ""
"If ``True`` and a variadic positional argument is specified, requires the"
" user to specify at least one argument. Defaults to ``False``."
msgstr ""

#: hcord.ext.commands.Command:116 of
msgid ""
"If ``True``\\, ignores extraneous strings passed to a command if all its "
"requirements are met (e.g. ``?foo a b c`` when only expecting ``a`` and "
"``b``). Otherwise :func:`.on_command_error` and local error handlers are "
"called with :exc:`.TooManyArguments`. Defaults to ``True``."
msgstr ""

#: hcord.ext.commands.Command:125 of
msgid ""
"If ``True``\\, cooldown processing is done after argument parsing, which "
"calls converters. If ``False`` then cooldown processing is done first and"
" then the converters are called second. Defaults to ``False``."
msgstr ""

#: hcord.ext.commands.Command.add_check:1
#: hcord.ext.commands.Group.add_check:1 of
#, fuzzy
msgid "Adds a check to the command."
msgstr "ボットにグローバルチェックを追加します。"

#: hcord.ext.commands.Command.add_check:3
#: hcord.ext.commands.Group.add_check:3 of
#, fuzzy
msgid "This is the non-decorator interface to :func:`.check`."
msgstr "これは:meth:`.check`と:meth:`.check_once`のデコレータでない実装です。"

#: hcord.ext.commands.Command.add_check:7
#: hcord.ext.commands.Group.add_check:7
#: hcord.ext.commands.HelpCommand.add_check:5 of
#, fuzzy
msgid "The function that will be used as a check."
msgstr "グローバルチェックとして使用される関数。"

#: hcord.ext.commands.Command.remove_check:1
#: hcord.ext.commands.Group.remove_check:1 of
msgid "Removes a check from the command."
msgstr ""

#: hcord.ext.commands.Command.remove_check:3
#: hcord.ext.commands.Group.remove_check:3
#: hcord.ext.commands.HelpCommand.remove_check:3 of
msgid ""
"This function is idempotent and will not raise an exception if the "
"function is not in the command's checks."
msgstr ""

#: hcord.ext.commands.Command.remove_check:8
#: hcord.ext.commands.Group.remove_check:8
#: hcord.ext.commands.HelpCommand.remove_check:8 of
msgid "The function to remove from the checks."
msgstr ""

#: hcord.ext.commands.Command.update:1 hcord.ext.commands.Group.update:1 of
msgid "Updates :class:`Command` instance with updated attributes."
msgstr ""

#: hcord.ext.commands.Command.update:3 hcord.ext.commands.Group.update:3 of
msgid ""
"This works similarly to the :func:`.command` decorator in terms of "
"parameters in that they are passed to the :class:`Command` or subclass "
"constructors, sans the name and callback."
msgstr ""

#: hcord.ext.commands.Command.__call__:3 of
msgid "Calls the internal callback that the command holds."
msgstr ""

#: hcord.ext.commands.Command.__call__:7 of
msgid ""
"This bypasses all mechanisms -- including checks, converters, invoke "
"hooks, cooldowns, etc. You must take care to pass the proper arguments "
"and types to this function."
msgstr ""

#: hcord.ext.commands.Command.copy:1 of
msgid "Creates a copy of this command."
msgstr ""

#: hcord.ext.commands.Command.copy:3 of
msgid "A new instance of this command."
msgstr ""

#: hcord.ext.commands.Command.copy:4 hcord.ext.commands.Context:47
#: hcord.ext.commands.Context:61 of
#, fuzzy
msgid ":class:`Command`"
msgstr ":class:`Command` またはサブクラス"

#: hcord.ext.commands.Command.clean_params:1
#: hcord.ext.commands.Group.clean_params:1 of
msgid ""
"OrderedDict[:class:`str`, :class:`inspect.Parameter`]: Retrieves the "
"parameter OrderedDict without the context or self parameters."
msgstr ""

#: hcord.ext.commands.Command.clean_params:4
#: hcord.ext.commands.Group.clean_params:4 of
msgid "Useful for inspecting signature."
msgstr ""

#: hcord.ext.commands.Command.full_parent_name:1
#: hcord.ext.commands.Group.full_parent_name:1 of
msgid "Retrieves the fully qualified parent command name."
msgstr ""

#: hcord.ext.commands.Command.full_parent_name:3
#: hcord.ext.commands.Group.full_parent_name:3 of
msgid ""
"This the base command name required to execute it. For example, in ``?one"
" two three`` the parent name would be ``one two``."
msgstr ""

#: hcord.ext.commands.Command.parents:1 hcord.ext.commands.Group.parents:1
#: of
msgid "Retrieves the parents of this command."
msgstr ""

#: hcord.ext.commands.Command.parents:3 hcord.ext.commands.Group.parents:3
#: of
msgid "If the command has no parents then it returns an empty :class:`list`."
msgstr ""

#: hcord.ext.commands.Command.parents:5 hcord.ext.commands.Group.parents:5
#: of
msgid "For example in commands ``?a b c test``, the parents are ``[c, b, a]``."
msgstr ""

#: hcord.ext.commands.Command.parents:9 hcord.ext.commands.Group.parents:9
#: hcord.ext.commands.HelpCommand.filter_commands:18 of
msgid "List[:class:`Command`]"
msgstr ""

#: hcord.ext.commands.Command.root_parent:1
#: hcord.ext.commands.Group.root_parent:1 of
msgid "Retrieves the root parent of this command."
msgstr ""

#: hcord.ext.commands.Command.root_parent:3
#: hcord.ext.commands.Group.root_parent:3 of
msgid "If the command has no parents then it returns ``None``."
msgstr ""

#: hcord.ext.commands.Command.root_parent:5
#: hcord.ext.commands.Group.root_parent:5 of
msgid "For example in commands ``?a b c test``, the root parent is ``a``."
msgstr ""

#: hcord.ext.commands.Command.qualified_name:1
#: hcord.ext.commands.Group.qualified_name:1 of
msgid "Retrieves the fully qualified command name."
msgstr ""

#: hcord.ext.commands.Command.qualified_name:3
#: hcord.ext.commands.Group.qualified_name:3 of
msgid ""
"This is the full parent name with the command name as well. For example, "
"in ``?one two three`` the qualified name would be ``one two three``."
msgstr ""

#: hcord.ext.commands.Command.is_on_cooldown:1
#: hcord.ext.commands.Group.is_on_cooldown:1 of
msgid "Checks whether the command is currently on cooldown."
msgstr ""

#: hcord.ext.commands.Command.is_on_cooldown:3
#: hcord.ext.commands.Group.is_on_cooldown:3 of
msgid "The invocation context to use when checking the commands cooldown status."
msgstr ""

#: hcord.ext.commands.Command.is_on_cooldown:6
#: hcord.ext.commands.Group.is_on_cooldown:6 of
msgid "A boolean indicating if the command is on cooldown."
msgstr ""

#: hcord.ext.commands.Command.reset_cooldown:1
#: hcord.ext.commands.Group.reset_cooldown:1 of
msgid "Resets the cooldown on this command."
msgstr ""

#: hcord.ext.commands.Command.reset_cooldown:3
#: hcord.ext.commands.Group.reset_cooldown:3 of
msgid "The invocation context to reset the cooldown under."
msgstr ""

#: hcord.ext.commands.Command.get_cooldown_retry_after:1
#: hcord.ext.commands.Group.get_cooldown_retry_after:1 of
msgid "Retrieves the amount of seconds before this command can be tried again."
msgstr ""

#: hcord.ext.commands.Command.get_cooldown_retry_after:5
#: hcord.ext.commands.Group.get_cooldown_retry_after:5 of
msgid "The invocation context to retrieve the cooldown from."
msgstr ""

#: hcord.ext.commands.Command.get_cooldown_retry_after:8
#: hcord.ext.commands.Group.get_cooldown_retry_after:8 of
msgid ""
"The amount of time left on this command's cooldown in seconds. If this is"
" ``0.0`` then the command isn't on cooldown."
msgstr ""

#: hcord.ext.commands.Command.error:1 hcord.ext.commands.Group.error:1 of
msgid "A decorator that registers a coroutine as a local error handler."
msgstr ""

#: hcord.ext.commands.Command.error:3 hcord.ext.commands.Group.error:3 of
msgid ""
"A local error handler is an :func:`.on_command_error` event limited to a "
"single command. However, the :func:`.on_command_error` is still invoked "
"afterwards as the catch-all."
msgstr ""

#: hcord.ext.commands.Command.error:7 hcord.ext.commands.Group.error:7 of
msgid "The coroutine to register as the local error handler."
msgstr ""

#: hcord.ext.commands.Command.before_invoke:9
#: hcord.ext.commands.Group.before_invoke:9 of
msgid "See :meth:`.Bot.before_invoke` for more info."
msgstr ""

#: hcord.ext.commands.Command.after_invoke:9
#: hcord.ext.commands.Group.after_invoke:9 of
msgid "See :meth:`.Bot.after_invoke` for more info."
msgstr ""

#: hcord.ext.commands.Command.cog_name:1
#: hcord.ext.commands.Group.cog_name:1 of
msgid "The name of the cog this command belongs to, if any."
msgstr ""

#: hcord.ext.commands.Command.short_doc:1
#: hcord.ext.commands.Group.short_doc:1 of
msgid "Gets the \"short\" documentation of a command."
msgstr ""

#: hcord.ext.commands.Command.short_doc:3
#: hcord.ext.commands.Group.short_doc:3 of
msgid ""
"By default, this is the :attr:`brief` attribute. If that lookup leads to "
"an empty string then the first line of the :attr:`help` attribute is used"
" instead."
msgstr ""

#: hcord.ext.commands.Command.signature:1
#: hcord.ext.commands.Group.signature:1 of
msgid "Returns a POSIX-like signature useful for help command output."
msgstr ""

#: hcord.ext.commands.Command.can_run:3 hcord.ext.commands.Group.can_run:3
#: of
msgid ""
"Checks if the command can be executed by checking all the predicates "
"inside the :attr:`checks` attribute. This also checks whether the command"
" is disabled."
msgstr ""

#: hcord.ext.commands.Command.can_run:7 hcord.ext.commands.Group.can_run:7
#: of
msgid "Checks whether the command is disabled or not"
msgstr ""

#: hcord.ext.commands.Command.can_run:10
#: hcord.ext.commands.Group.can_run:10 of
msgid "The ctx of the command currently being invoked."
msgstr ""

#: hcord.ext.commands.Command.can_run:13
#: hcord.ext.commands.Group.can_run:13 of
msgid ""
"Any command error that was raised during a check call will be propagated"
"     by this function."
msgstr ""

#: hcord.ext.commands.Command.can_run:15
#: hcord.ext.commands.Group.can_run:15 of
msgid "A boolean indicating if the command can be invoked."
msgstr ""

#: hcord.ext.commands.Group:1 of
msgid ""
"A class that implements a grouping protocol for commands to be executed "
"as subcommands."
msgstr ""

#: hcord.ext.commands.Group:4 of
msgid ""
"This class is a subclass of :class:`.Command` and thus all options valid "
"in :class:`.Command` are valid in here as well."
msgstr ""

#: hcord.ext.commands.Group:9 of
msgid ""
"Indicates if the group callback should begin parsing and invocation only "
"if no subcommand was found. Useful for making it an error handling "
"function to tell the user that no subcommand was found or to have "
"different functionality in case no subcommand was found. If this is "
"``False``, then the group callback will always be invoked first. This "
"means that the checks and the parsing dictated by its parameters will be "
"executed. Defaults to ``False``."
msgstr ""

#: hcord.ext.commands.Group:22 of
msgid ""
"Indicates if the group's commands should be case insensitive. Defaults to"
" ``False``."
msgstr ""

#: hcord.ext.commands.Group.copy:1 of
msgid "Creates a copy of this :class:`Group`."
msgstr ""

#: hcord.ext.commands.Group.copy:3 of
msgid "A new instance of this group."
msgstr ""

#: hcord.ext.commands.Group.copy:4 of
#, fuzzy
msgid ":class:`Group`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.GroupMixin:1 of
msgid ""
"A mixin that implements common functionality for classes that behave "
"similar to :class:`.Group` and are allowed to register commands."
msgstr ""

#: hcord.ext.commands.GroupMixin:6 of
msgid "A mapping of command name to :class:`.Command` objects."
msgstr ""

#: hcord.ext.commands.CogMeta:57 hcord.ext.commands.Context:35
#: hcord.ext.commands.GroupMixin:9 hcord.ext.commands.HelpCommand:40 of
#, fuzzy
msgid ":class:`dict`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.GroupMixin:13 of
msgid "Whether the commands should be case insensitive. Defaults to ``False``."
msgstr ""

#: ../../ext/commands/api.rst:88
msgid "Cogs"
msgstr "Cogs"

#: hcord.ext.commands.Cog:1 of
msgid "The base class that all cogs must inherit from."
msgstr ""

#: hcord.ext.commands.Cog:3 of
msgid ""
"A cog is a collection of commands, listeners, and optional state to help "
"group commands together. More information on them can be found on the "
":ref:`ext_commands_cogs` page."
msgstr ""

#: hcord.ext.commands.Cog:7 of
msgid ""
"When inheriting from this class, the options shown in :class:`CogMeta` "
"are equally valid here."
msgstr ""

#: hcord.ext.commands.Cog.get_commands:1 of
msgid ""
"A :class:`list` of :class:`.Command`\\s that are defined inside this cog."
"  .. note::      This does not include subcommands."
msgstr ""

#: hcord.ext.commands.Cog.get_commands:1 of
msgid "A :class:`list` of :class:`.Command`\\s that are defined inside this cog."
msgstr ""

#: hcord.ext.commands.Cog.get_commands:6 of
msgid "This does not include subcommands."
msgstr ""

#: hcord.ext.commands.Cog.get_commands:7 of
msgid "List[:class:`.Command`]"
msgstr ""

#: hcord.ext.commands.Cog.qualified_name:1 of
msgid "Returns the cog's specified name, not the class name."
msgstr ""

#: hcord.ext.commands.Cog.description:1 of
msgid "Returns the cog's description, typically the cleaned docstring."
msgstr ""

#: hcord.ext.commands.Cog.walk_commands:1 of
msgid ""
"An iterator that recursively walks through this cog's commands and "
"subcommands."
msgstr ""

#: hcord.ext.commands.Cog.walk_commands:3 of
msgid ""
"Union[:class:`.Command`, :class:`.Group`] -- A command or group from the "
"cog."
msgstr ""

#: hcord.ext.commands.Cog.get_listeners:1 of
msgid ""
"Returns a :class:`list` of (name, function) listener pairs that are "
"defined in this cog."
msgstr ""

#: hcord.ext.commands.Cog.get_listeners:3 of
msgid "The listeners defined in this cog."
msgstr ""

#: hcord.ext.commands.Cog.get_listeners:4 of
msgid "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"
msgstr ""

#: hcord.ext.commands.Cog.listener:1 of
msgid "A decorator that marks a function as a listener."
msgstr ""

#: hcord.ext.commands.Cog.listener:3 of
msgid "This is the cog equivalent of :meth:`.Bot.listen`."
msgstr ""

#: hcord.ext.commands.Cog.listener:5 of
msgid ""
"The name of the event being listened to. If not provided, it defaults to "
"the function's name."
msgstr ""

#: hcord.ext.commands.Cog.listener:9 of
msgid ""
"The function is not a coroutine function or a string was not passed as"
"     the name."
msgstr ""

#: hcord.ext.commands.Cog.cog_unload:1 of
msgid "A special method that is called when the cog gets removed."
msgstr ""

#: hcord.ext.commands.Cog.cog_unload:3 of
msgid "This function **cannot** be a coroutine. It must be a regular function."
msgstr ""

#: hcord.ext.commands.Cog.cog_unload:6 of
msgid "Subclasses must replace this if they want special unloading behaviour."
msgstr ""

#: hcord.ext.commands.Cog.bot_check_once:1 of
msgid "A special method that registers as a :meth:`.Bot.check_once` check."
msgstr ""

#: hcord.ext.commands.Cog.bot_check:4
#: hcord.ext.commands.Cog.bot_check_once:4
#: hcord.ext.commands.Cog.cog_check:4 of
msgid ""
"This function **can** be a coroutine and must take a sole parameter, "
"``ctx``, to represent the :class:`.Context`."
msgstr ""

#: hcord.ext.commands.Cog.bot_check:1 of
msgid "A special method that registers as a :meth:`.Bot.check` check."
msgstr ""

#: hcord.ext.commands.Cog.cog_check:1 of
msgid ""
"A special method that registers as a :func:`commands.check` for every "
"command and subcommand in this cog."
msgstr ""

#: hcord.ext.commands.Cog.cog_command_error:1 of
msgid ""
"A special method that is called whenever an error is dispatched inside "
"this cog."
msgstr ""

#: hcord.ext.commands.Cog.cog_command_error:4 of
msgid ""
"This is similar to :func:`.on_command_error` except only applying to the "
"commands inside this cog."
msgstr ""

#: hcord.ext.commands.Cog.cog_after_invoke:5
#: hcord.ext.commands.Cog.cog_before_invoke:5
#: hcord.ext.commands.Cog.cog_command_error:7 of
msgid "This **must** be a coroutine."
msgstr ""

#: hcord.ext.commands.Cog.cog_command_error:9 of
msgid "The invocation context where the error happened."
msgstr ""

#: hcord.ext.commands.Cog.cog_command_error:11 of
msgid "The error that happened."
msgstr ""

#: hcord.ext.commands.Cog.cog_before_invoke:1 of
msgid "A special method that acts as a cog local pre-invoke hook."
msgstr ""

#: hcord.ext.commands.Cog.cog_before_invoke:3 of
msgid "This is similar to :meth:`.Command.before_invoke`."
msgstr ""

#: hcord.ext.commands.Cog.cog_after_invoke:1 of
msgid "A special method that acts as a cog local post-invoke hook."
msgstr ""

#: hcord.ext.commands.Cog.cog_after_invoke:3 of
msgid "This is similar to :meth:`.Command.after_invoke`."
msgstr ""

#: hcord.ext.commands.CogMeta:1 of
msgid "A metaclass for defining a cog."
msgstr ""

#: hcord.ext.commands.CogMeta:3 of
msgid ""
"Note that you should probably not use this directly. It is exposed purely"
" for documentation purposes along with making custom metaclasses to "
"intermix with other metaclasses such as the :class:`abc.ABCMeta` "
"metaclass."
msgstr ""

#: hcord.ext.commands.CogMeta:7 of
msgid ""
"For example, to create an abstract cog mixin class, the following would "
"be done."
msgstr ""

#: hcord.ext.commands.CogMeta:24 of
msgid ""
"When passing an attribute of a metaclass that is documented below, note "
"that you must pass it as a keyword-only argument to the class creation "
"like the following example:"
msgstr ""

#: hcord.ext.commands.CogMeta:35 of
msgid ""
"The cog name. By default, it is the name of the class with no "
"modification."
msgstr ""

#: hcord.ext.commands.CogMeta:41 of
msgid ""
"A list of attributes to apply to every command inside this cog. The "
"dictionary is passed into the :class:`Command` options at ``__init__``. "
"If you specify attributes inside the command attribute in the class, it "
"will override the one specified inside this attribute. For example:"
msgstr ""

#: ../../ext/commands/api.rst:99
msgid "Help Commands"
msgstr ""

#: hcord.ext.commands.HelpCommand:1 of
msgid "The base implementation for help command formatting."
msgstr ""

#: hcord.ext.commands.HelpCommand:5 of
msgid ""
"Internally instances of this class are deep copied every time the command"
" itself is invoked to prevent a race condition mentioned in "
":issue:`2123`."
msgstr ""

#: hcord.ext.commands.HelpCommand:9 of
msgid ""
"This means that relying on the state of this class to be the same between"
" command invocations would not work as expected."
msgstr ""

#: hcord.ext.commands.HelpCommand:14 of
msgid ""
"The context that invoked this help formatter. This is generally set after"
" the help command assigned, :func:`command_callback`\\, has been called."
msgstr ""

#: hcord.ext.commands.HelpCommand:17 of
msgid "Optional[:class:`Context`]"
msgstr ""

#: hcord.ext.commands.HelpCommand:21 of
msgid ""
"Specifies if hidden commands should be shown in the output. Defaults to "
"``False``."
msgstr ""

#: hcord.ext.commands.HelpCommand:28 of
msgid ""
"Specifies if commands should have their :attr:`.Command.checks` called "
"and verified. Defaults to ``True``."
msgstr ""

#: hcord.ext.commands.HelpCommand:35 of
msgid ""
"A dictionary of options to pass in for the construction of the help "
"command. This allows you to change the command behaviour without actually"
" changing the implementation of the command. The attributes will be the "
"same as the ones passed in the :class:`.Command` constructor."
msgstr ""

#: hcord.ext.commands.HelpCommand.add_check:1 of
#, fuzzy
msgid "Adds a check to the help command."
msgstr "ボットにグローバルチェックを追加します。"

#: hcord.ext.commands.HelpCommand.remove_check:1 of
msgid "Removes a check from the help command."
msgstr ""

#: hcord.ext.commands.HelpCommand.get_bot_mapping:1 of
msgid "Retrieves the bot mapping passed to :meth:`send_bot_help`."
msgstr ""

#: hcord.ext.commands.HelpCommand.clean_prefix:1 of
msgid ""
"The cleaned up invoke prefix. i.e. mentions are ``@name`` instead of "
"``<@id>``."
msgstr "「クリーンアップ」されたプレフィックスを返します。たとえば、メンションは ``<@id>`` のかわりに ``@name`` となります。"

#: hcord.ext.commands.HelpCommand.invoked_with:1 of
msgid ""
"Similar to :attr:`Context.invoked_with` except properly handles the case "
"where :meth:`Context.send_help` is used."
msgstr ""

#: hcord.ext.commands.HelpCommand.invoked_with:4 of
msgid ""
"If the help command was used regularly then this returns the "
":attr:`Context.invoked_with` attribute. Otherwise, if it the help command"
" was called using :meth:`Context.send_help` then it returns the internal "
"command name of the help command."
msgstr ""

#: hcord.ext.commands.HelpCommand.invoked_with:9 of
msgid "The command name that triggered this invocation."
msgstr ""

#: hcord.ext.commands.HelpCommand.get_command_signature:1
#: hcord.ext.commands.MinimalHelpCommand.get_command_signature:1 of
msgid "Retrieves the signature portion of the help page."
msgstr "ヘルプページに表示される、コマンドの使用方法を示す文字列を返します。"

#: hcord.ext.commands.HelpCommand.get_command_signature:3
#: hcord.ext.commands.MinimalHelpCommand.get_command_signature:3 of
msgid "The command to get the signature of."
msgstr ""

#: hcord.ext.commands.HelpCommand.get_command_signature:6
#: hcord.ext.commands.MinimalHelpCommand.get_command_signature:6 of
msgid "The signature for the command."
msgstr ""

#: hcord.ext.commands.HelpCommand.remove_mentions:1 of
msgid "Removes mentions from the string to prevent abuse."
msgstr ""

#: hcord.ext.commands.HelpCommand.remove_mentions:3 of
msgid "This includes ``@everyone``, ``@here``, member mentions and role mentions."
msgstr ""

#: hcord.ext.commands.HelpCommand.remove_mentions:5 of
msgid "The string with mentions removed."
msgstr ""

#: hcord.ext.commands.HelpCommand.cog:1 of
msgid "A property for retrieving or setting the cog for the help command."
msgstr ""

#: hcord.ext.commands.HelpCommand.cog:3 of
msgid ""
"When a cog is set for the help command, it is as-if the help command "
"belongs to that cog. All cog special methods will apply to the help "
"command and it will be automatically unset on unload."
msgstr ""

#: hcord.ext.commands.HelpCommand.cog:7 of
msgid "To unbind the cog from the help command, you can set it to ``None``."
msgstr ""

#: hcord.ext.commands.HelpCommand.cog:9 of
msgid "The cog that is currently set for the help command."
msgstr ""

#: hcord.ext.commands.HelpCommand.command_not_found:1
#: hcord.ext.commands.HelpCommand.subcommand_not_found:1 of
msgid "|maybecoro|"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_not_found:3 of
msgid ""
"A method called when a command is not found in the help command. This is "
"useful to override for i18n."
msgstr ""

#: hcord.ext.commands.HelpCommand.command_not_found:6 of
msgid "Defaults to ``No command called {0} found.``"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_not_found:8 of
msgid ""
"The string that contains the invalid command. Note that this has had "
"mentions removed to prevent abuse."
msgstr ""

#: hcord.ext.commands.HelpCommand.command_not_found:12 of
msgid "The string to use when a command has not been found."
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:3 of
msgid ""
"A method called when a command did not have a subcommand requested in the"
" help command. This is useful to override for i18n."
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:6 of
msgid "Defaults to either:"
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:8 of
msgid "``'Command \"{command.qualified_name}\" has no subcommands.'``"
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:9 of
msgid "If there is no subcommand in the ``command`` parameter."
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:11 of
msgid ""
"``'Command \"{command.qualified_name}\" has no subcommand named "
"{string}'``"
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:11 of
msgid "If the ``command`` parameter has subcommands but not one named ``string``."
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:13 of
msgid "The command that did not have the subcommand requested."
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:15 of
msgid ""
"The string that contains the invalid subcommand. Note that this has had "
"mentions removed to prevent abuse."
msgstr ""

#: hcord.ext.commands.HelpCommand.subcommand_not_found:19 of
msgid "The string to use when the command did not have the subcommand requested."
msgstr ""

#: hcord.ext.commands.HelpCommand.filter_commands:3 of
msgid "Returns a filtered list of commands and optionally sorts them."
msgstr ""

#: hcord.ext.commands.HelpCommand.filter_commands:5 of
msgid ""
"This takes into account the :attr:`verify_checks` and :attr:`show_hidden`"
" attributes."
msgstr ""

#: hcord.ext.commands.HelpCommand.filter_commands:8 of
msgid "An iterable of commands that are getting filtered."
msgstr ""

#: hcord.ext.commands.HelpCommand.filter_commands:10 of
msgid "Whether to sort the result."
msgstr ""

#: hcord.ext.commands.HelpCommand.filter_commands:12 of
msgid ""
"An optional key function to pass to :func:`py:sorted` that takes a "
":class:`Command` as its sole parameter. If ``sort`` is passed as ``True``"
" then this will default as the command name."
msgstr ""

#: hcord.ext.commands.HelpCommand.filter_commands:17 of
msgid "A list of commands that passed the filter."
msgstr ""

#: hcord.ext.commands.HelpCommand.get_max_size:1 of
msgid "Returns the largest name length of the specified command list."
msgstr ""

#: hcord.ext.commands.HelpCommand.get_max_size:3 of
msgid "A sequence of commands to check for the largest size."
msgstr ""

#: hcord.ext.commands.HelpCommand.get_max_size:6 of
msgid "The maximum width of the commands."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:12
#: hcord.ext.commands.DefaultHelpCommand:42
#: hcord.ext.commands.HelpCommand.get_max_size:7
#: hcord.ext.commands.MaxConcurrencyReached:9
#: hcord.ext.commands.Paginator:25 of
msgid ":class:`int`"
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.get_destination:1
#: hcord.ext.commands.HelpCommand.get_destination:1
#: hcord.ext.commands.MinimalHelpCommand.get_destination:1 of
msgid ""
"Returns the :class:`~hcord.abc.Messageable` where the help command will"
" be output."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.get_destination:3
#: hcord.ext.commands.HelpCommand.get_destination:3
#: hcord.ext.commands.HelpCommand.send_bot_help:11
#: hcord.ext.commands.HelpCommand.send_cog_help:11
#: hcord.ext.commands.HelpCommand.send_command_help:10
#: hcord.ext.commands.HelpCommand.send_error_message:7
#: hcord.ext.commands.HelpCommand.send_group_help:11
#: hcord.ext.commands.MinimalHelpCommand.get_destination:3 of
msgid "You can override this method to customise the behaviour."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.get_destination:5
#: hcord.ext.commands.HelpCommand.get_destination:5
#: hcord.ext.commands.MinimalHelpCommand.get_destination:5 of
msgid "By default this returns the context's channel."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.get_destination:7
#: hcord.ext.commands.HelpCommand.get_destination:7
#: hcord.ext.commands.MinimalHelpCommand.get_destination:7 of
msgid "The destination where the help command will be output."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.get_destination:8
#: hcord.ext.commands.HelpCommand.get_destination:8
#: hcord.ext.commands.MinimalHelpCommand.get_destination:8 of
msgid ":class:`.abc.Messageable`"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_error_message:3 of
msgid ""
"Handles the implementation when an error happens in the help command. For"
" example, the result of :meth:`command_not_found` or "
":meth:`command_has_no_subcommand_found` will be passed here."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_error_message:9 of
msgid ""
"By default, this sends the error message to the destination specified by "
":meth:`get_destination`."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_bot_help:15
#: hcord.ext.commands.HelpCommand.send_cog_help:15
#: hcord.ext.commands.HelpCommand.send_command_help:14
#: hcord.ext.commands.HelpCommand.send_error_message:14
#: hcord.ext.commands.HelpCommand.send_group_help:15 of
msgid "You can access the invocation context with :attr:`HelpCommand.context`."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_error_message:16 of
msgid ""
"The error message to display to the user. Note that this has had mentions"
" removed to prevent abuse."
msgstr ""

#: hcord.ext.commands.HelpCommand.on_help_command_error:3 of
msgid ""
"The help command's error handler, as specified by "
":ref:`ext_commands_error_handler`."
msgstr ""

#: hcord.ext.commands.HelpCommand.on_help_command_error:5 of
msgid ""
"Useful to override if you need some specific behaviour when the error "
"handler is called."
msgstr ""

#: hcord.ext.commands.HelpCommand.on_help_command_error:8 of
msgid ""
"By default this method does nothing and just propagates to the default "
"error handlers."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_bot_help:3 of
msgid ""
"Handles the implementation of the bot command page in the help command. "
"This function is called when the help command is called with no "
"arguments."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_bot_help:6
#: hcord.ext.commands.HelpCommand.send_cog_help:6
#: hcord.ext.commands.HelpCommand.send_command_help:5
#: hcord.ext.commands.HelpCommand.send_group_help:6 of
msgid ""
"It should be noted that this method does not return anything -- rather "
"the actual message sending should be done inside this method. Well "
"behaved subclasses should use :meth:`get_destination` to know where to "
"send, as this is a customisation point for other users."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_bot_help:17 of
msgid ""
"Also, the commands in the mapping are not filtered. To do the filtering "
"you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_bot_help:20 of
msgid ""
"A mapping of cogs to commands that have been requested by the user for "
"help. The key of the mapping is the :class:`~.commands.Cog` that the "
"command belongs to, or ``None`` if there isn't one, and the value is a "
"list of commands that belongs to that cog."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_cog_help:3 of
msgid ""
"Handles the implementation of the cog page in the help command. This "
"function is called when the help command is called with a cog as the "
"argument."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_cog_help:17 of
msgid ""
"To get the commands that belong to this cog see :meth:`Cog.get_commands`."
" The commands returned not filtered. To do the filtering you will have to"
" call :meth:`filter_commands` yourself."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_cog_help:21 of
msgid "The cog that was requested for help."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_group_help:3 of
msgid ""
"Handles the implementation of the group page in the help command. This "
"function is called when the help command is called with a group as the "
"argument."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_group_help:17 of
msgid ""
"To get the commands that belong to this group without aliases see "
":attr:`Group.commands`. The commands returned not filtered. To do the "
"filtering you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_group_help:21 of
msgid "The group that was requested for help."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:3 of
msgid "Handles the implementation of the single command page in the help command."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:16 of
msgid "Showing Help"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:19 of
msgid ""
"There are certain attributes and methods that are helpful for a help "
"command to show such as the following:"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:22 of
msgid ":attr:`Command.help`"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:23 of
msgid ":attr:`Command.brief`"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:24 of
msgid ":attr:`Command.short_doc`"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:25 of
msgid ":attr:`Command.description`"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:26 of
msgid ":meth:`get_command_signature`"
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:28 of
msgid ""
"There are more than just these attributes but feel free to play around "
"with these to help you get started to get the output that you want."
msgstr ""

#: hcord.ext.commands.HelpCommand.send_command_help:31 of
msgid "The command that was requested for help."
msgstr ""

#: hcord.ext.commands.HelpCommand.prepare_help_command:3 of
msgid ""
"A low level method that can be used to prepare the help command before it"
" does anything. For example, if you need to prepare some state in your "
"subclass before the command does its processing then this would be the "
"place to do it."
msgstr ""

#: hcord.ext.commands.HelpCommand.prepare_help_command:8
#: hcord.ext.commands.MinimalHelpCommand.get_ending_note:3 of
msgid "The default implementation does nothing."
msgstr ""

#: hcord.ext.commands.HelpCommand.prepare_help_command:12 of
msgid ""
"This is called *inside* the help command callback body. So all the usual "
"rules that happen inside apply here as well."
msgstr ""

#: hcord.ext.commands.HelpCommand.prepare_help_command:17 of
msgid "The argument passed to the help command."
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:3 of
msgid "The actual implementation of the help command."
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:5 of
msgid ""
"It is not recommended to override this method and instead change the "
"behaviour through the methods that actually get dispatched."
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:8 of
msgid ":meth:`send_bot_help`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:9 of
msgid ":meth:`send_cog_help`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:10 of
msgid ":meth:`send_group_help`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:11 of
msgid ":meth:`send_command_help`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:12 of
msgid ":meth:`get_destination`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:13 of
msgid ":meth:`command_not_found`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:14 of
msgid ":meth:`subcommand_not_found`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:15 of
msgid ":meth:`send_error_message`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:16 of
msgid ":meth:`on_help_command_error`"
msgstr ""

#: hcord.ext.commands.HelpCommand.command_callback:17 of
msgid ":meth:`prepare_help_command`"
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:1 of
msgid "The implementation of the default help command."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:3
#: hcord.ext.commands.MinimalHelpCommand:3 of
msgid "This inherits from :class:`HelpCommand`."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:5 of
msgid "It extends it with the following attributes."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:9 of
msgid "The maximum number of characters that fit in a line. Defaults to 80."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:16
#: hcord.ext.commands.MinimalHelpCommand:7 of
msgid ""
"Whether to sort the commands in the output alphabetically. Defaults to "
"``True``."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:22
#: hcord.ext.commands.MinimalHelpCommand:27 of
msgid ""
"A tribool that indicates if the help command should DM the user instead "
"of sending it to the channel it received it from. If the boolean is set "
"to ``True``, then all help output is DM'd. If ``False``, none of the help"
" output is DM'd. If ``None``, then the bot will only DM when the help "
"message becomes too long (dictated by more than :attr:`dm_help_threshold`"
" characters). Defaults to ``False``."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:29
#: hcord.ext.commands.MinimalHelpCommand:34 of
msgid "Optional[:class:`bool`]"
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:33
#: hcord.ext.commands.MinimalHelpCommand:38 of
msgid ""
"The number of characters the paginator must accumulate before getting "
"DM'd to the user if :attr:`dm_help` is set to ``None``. Defaults to 1000."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:40 of
msgid "How much to indent the commands from a heading. Defaults to ``2``."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:46 of
msgid ""
"The command list's heading string used when the help command is invoked "
"with a category name. Useful for i18n. Defaults to ``\"Commands:\"``"
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:53
#: hcord.ext.commands.MinimalHelpCommand:45 of
msgid ""
"The string used when there is a command which does not belong to any "
"category(cog). Useful for i18n. Defaults to ``\"No Category\"``"
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:60
#: hcord.ext.commands.MinimalHelpCommand:52 of
msgid "The paginator used to paginate the help command output."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand:62
#: hcord.ext.commands.MinimalHelpCommand:54 of
#, fuzzy
msgid ":class:`Paginator`"
msgstr ":class:`.AppInfo`"

#: hcord.ext.commands.DefaultHelpCommand.shorten_text:1 of
#, fuzzy
msgid ":class:`str`: Shortens text to fit into the :attr:`width`."
msgstr "渡された文字列を、 :attr:`width` に収まるよう省略します。"

#: hcord.ext.commands.DefaultHelpCommand.get_ending_note:1 of
#, fuzzy
msgid ""
":class:`str`: Returns help command's ending note. This is mainly useful "
"to override for i18n purposes."
msgstr "Helpコマンドの末尾の文字列を返します。主に翻訳する際にオーバーライドしてください。"

#: hcord.ext.commands.DefaultHelpCommand.add_indented_commands:1 of
msgid "Indents a list of commands after the specified heading."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.add_indented_commands:3 of
msgid "The formatting is added to the :attr:`paginator`."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.add_indented_commands:5 of
msgid ""
"The default implementation is the command name indented by :attr:`indent`"
" spaces, padded to ``max_size`` followed by the command's "
":attr:`Command.short_doc` and then shortened to fit into the "
":attr:`width`."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.add_indented_commands:10 of
msgid "A list of commands to indent for output."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.add_indented_commands:12 of
msgid ""
"The heading to add to the output. This is only added if the list of "
"commands is greater than 0."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.add_indented_commands:15 of
msgid ""
"The max size to use for the gap between indents. If unspecified, calls "
":meth:`get_max_size` on the commands parameter."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.send_pages:1
#: hcord.ext.commands.MinimalHelpCommand.send_pages:1 of
msgid ""
"A helper utility to send the page output from :attr:`paginator` to the "
"destination."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.add_command_formatting:1 of
msgid ""
"A utility function to format the non-indented block of commands and "
"groups."
msgstr ""

#: hcord.ext.commands.DefaultHelpCommand.add_command_formatting:3
#: hcord.ext.commands.MinimalHelpCommand.add_command_formatting:3 of
msgid "The command to format."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand:1 of
msgid "An implementation of a help command with minimal output."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand:13 of
msgid ""
"The command list's heading string used when the help command is invoked "
"with a category name. Useful for i18n. Defaults to ``\"Commands\"``"
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand:20 of
msgid ""
"The alias list's heading string used to list the aliases of the command. "
"Useful for i18n. Defaults to ``\"Aliases:\"``."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.get_opening_note:1 of
msgid ""
"Returns help command's opening note. This is mainly useful to override "
"for i18n purposes."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.get_opening_note:3 of
msgid "The default implementation returns ::"
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.get_opening_note:8 of
msgid "The help command opening note."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.get_ending_note:1 of
msgid ""
"Return the help command's ending note. This is mainly useful to override "
"for i18n purposes."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.get_ending_note:5 of
msgid "The help command ending note."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:1 of
msgid "Adds the minified bot heading with commands to the output."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_aliases_formatting:3
#: hcord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:3
#: hcord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:3 of
msgid "The formatting should be added to the :attr:`paginator`."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:5 of
msgid ""
"The default implementation is a bold underline heading followed by "
"commands separated by an EN SPACE (U+2002) in the next line."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:8 of
msgid "A list of commands that belong to the heading."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:10 of
msgid "The heading to add to the line."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:1 of
msgid "Adds formatting information on a subcommand."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:5 of
msgid ""
"The default implementation is the prefix and the "
":attr:`Command.qualified_name` optionally followed by an En dash and the "
"command's :attr:`Command.short_doc`."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:8 of
msgid "The command to show information of."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_aliases_formatting:1 of
msgid "Adds the formatting information on a command's aliases."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_aliases_formatting:5 of
msgid ""
"The default implementation is the :attr:`aliases_heading` bolded followed"
" by a comma separated list of aliases."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_aliases_formatting:8 of
msgid "This is not called if there are no aliases to format."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_aliases_formatting:10 of
msgid "A list of aliases to format."
msgstr ""

#: hcord.ext.commands.MinimalHelpCommand.add_command_formatting:1 of
msgid "A utility function to format commands and groups."
msgstr ""

#: hcord.ext.commands.Paginator:1 of
msgid "A class that aids in paginating code blocks for Discord messages."
msgstr ""

#: hcord.ext.commands.Paginator:7 of
msgid "Returns the total number of characters in the paginator."
msgstr ""

#: hcord.ext.commands.Paginator:11 of
msgid "The prefix inserted to every page. e.g. three backticks."
msgstr ""

#: hcord.ext.commands.Paginator:17 of
msgid "The suffix appended at the end of every page. e.g. three backticks."
msgstr ""

#: hcord.ext.commands.Paginator:23 of
msgid "The maximum amount of codepoints allowed in a page."
msgstr ""

#: hcord.ext.commands.Paginator.clear:1 of
msgid "Clears the paginator to have no pages."
msgstr ""

#: hcord.ext.commands.Paginator.add_line:1 of
msgid "Adds a line to the current page."
msgstr ""

#: hcord.ext.commands.Paginator.add_line:3 of
msgid "If the line exceeds the :attr:`max_size` then an exception is raised."
msgstr ""

#: hcord.ext.commands.Paginator.add_line:6 of
msgid "The line to add."
msgstr ""

#: hcord.ext.commands.Paginator.add_line:8 of
msgid "Indicates if another empty line should be added."
msgstr ""

#: hcord.ext.commands.Paginator.add_line:11 of
msgid "The line was too big for the current :attr:`max_size`."
msgstr ""

#: hcord.ext.commands.Paginator.close_page:1 of
msgid "Prematurely terminate a page."
msgstr ""

#: hcord.ext.commands.Paginator.pages:1 of
msgid "Returns the rendered list of pages."
msgstr ""

#: hcord.ext.commands.Paginator.pages:3 of
msgid "List[:class:`str`]"
msgstr ""

#: ../../ext/commands/api.rst:116
msgid "Enums"
msgstr ""

#: ../../ext/commands/api.rst:120
msgid "Specifies a type of bucket for, e.g. a cooldown."
msgstr ""

#: ../../ext/commands/api.rst:124
msgid "The default bucket operates on a global basis."
msgstr ""

#: ../../ext/commands/api.rst:127
msgid "The user bucket operates on a per-user basis."
msgstr ""

#: ../../ext/commands/api.rst:130
msgid "The guild bucket operates on a per-guild basis."
msgstr ""

#: ../../ext/commands/api.rst:133
msgid "The channel bucket operates on a per-channel basis."
msgstr ""

#: ../../ext/commands/api.rst:136
msgid "The member bucket operates on a per-member basis."
msgstr ""

#: ../../ext/commands/api.rst:139
msgid "The category bucket operates on a per-category basis."
msgstr ""

#: ../../ext/commands/api.rst:142
msgid "The role bucket operates on a per-role basis."
msgstr ""

#: ../../ext/commands/api.rst:150
msgid "Checks"
msgstr ""

#: hcord.ext.commands.check:1 of
msgid ""
"A decorator that adds a check to the :class:`.Command` or its subclasses."
" These checks could be accessed via :attr:`.Command.checks`."
msgstr ""

#: hcord.ext.commands.check:4 of
msgid ""
"These checks should be predicates that take in a single parameter taking "
"a :class:`.Context`. If the check returns a ``False``\\-like value then "
"during invocation a :exc:`.CheckFailure` exception is raised and sent to "
"the :func:`.on_command_error` event."
msgstr ""

#: hcord.ext.commands.check:9 of
msgid ""
"If an exception should be thrown in the predicate then it should be a "
"subclass of :exc:`.CommandError`. Any exception not subclassed from it "
"will be propagated while those subclassed will be sent to "
":func:`.on_command_error`."
msgstr ""

#: hcord.ext.commands.check:14 of
msgid ""
"A special attribute named ``predicate`` is bound to the value returned by"
" this decorator to retrieve the predicate passed to the decorator. This "
"allows the following introspection and chaining to be done:"
msgstr ""

#: hcord.ext.commands.check:30 of
msgid ""
"The function returned by ``predicate`` is **always** a coroutine, even if"
" the original function was not a coroutine."
msgstr ""

#: hcord.ext.commands.check:33 of
msgid "The ``predicate`` attribute was added."
msgstr ""

#: hcord.ext.commands.check:38 of
msgid "Creating a basic check to see if the command invoker is you."
msgstr ""

#: hcord.ext.commands.check:50 of
msgid "Transforming common checks into its own decorator:"
msgstr ""

#: hcord.ext.commands.check:64 of
msgid "The predicate to check if the command should be invoked."
msgstr ""

#: hcord.ext.commands.check_any:1 of
msgid ""
"A :func:`check` that is added that checks if any of the checks passed "
"will pass, i.e. using logical OR."
msgstr ""

#: hcord.ext.commands.check_any:4 of
msgid ""
"If all checks fail then :exc:`.CheckAnyFailure` is raised to signal the "
"failure. It inherits from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.check_any:9 of
msgid "The ``predicate`` attribute for this function **is** a coroutine."
msgstr ""

#: hcord.ext.commands.check_any:13 of
msgid ""
"An argument list of checks that have been decorated with the "
":func:`check` decorator."
msgstr ""

#: hcord.ext.commands.check_any:17 of
msgid ""
"A check passed has not been decorated with the :func:`check`     "
"decorator."
msgstr ""

#: hcord.ext.commands.check_any:21 of
msgid "Creating a basic check to see if it's the bot owner or the server owner:"
msgstr ""

#: hcord.ext.commands.has_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has the role specified via the name or ID specified."
msgstr ""

#: hcord.ext.commands.has_role:4 of
msgid ""
"If a string is specified, you must give the exact name of the role, "
"including caps and spelling."
msgstr ""

#: hcord.ext.commands.has_role:7 of
msgid ""
"If an integer is specified, you must give the exact snowflake ID of the "
"role."
msgstr ""

#: hcord.ext.commands.has_role:9 of
msgid ""
"If the message is invoked in a private message context then the check "
"will return ``False``."
msgstr ""

#: hcord.ext.commands.has_role:12 of
msgid ""
"This check raises one of two special exceptions, :exc:`.MissingRole` if "
"the user is missing a role, or :exc:`.NoPrivateMessage` if it is used in "
"a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.has_role:18 of
msgid ""
"Raise :exc:`.MissingRole` or :exc:`.NoPrivateMessage` instead of generic "
":exc:`.CheckFailure`"
msgstr ""

#: hcord.ext.commands.has_role:21 of
msgid "The name or ID of the role to check."
msgstr ""

#: hcord.ext.commands.has_permissions:1 of
msgid ""
"A :func:`.check` that is added that checks if the member has all of the "
"permissions necessary."
msgstr ""

#: hcord.ext.commands.has_permissions:4 of
msgid ""
"Note that this check operates on the current channel permissions, not the"
" guild wide permissions."
msgstr ""

#: hcord.ext.commands.has_permissions:7 of
msgid ""
"The permissions passed in must be exactly like the properties shown under"
" :class:`.hcord.Permissions`."
msgstr ""

#: hcord.ext.commands.has_permissions:10 of
msgid ""
"This check raises a special exception, :exc:`.MissingPermissions` that is"
" inherited from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.has_permissions:13 of
msgid "An argument list of permissions to check for."
msgstr ""

#: hcord.ext.commands.has_guild_permissions:1 of
msgid ""
"Similar to :func:`.has_permissions`, but operates on guild wide "
"permissions instead of the current channel permissions."
msgstr ""

#: hcord.ext.commands.has_guild_permissions:4 of
msgid ""
"If this check is called in a DM context, it will raise an exception, "
":exc:`.NoPrivateMessage`."
msgstr ""

#: hcord.ext.commands.has_any_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has **any** of the roles specified. This means that if they have "
"one out of the three roles specified, then this check will return `True`."
msgstr ""

#: hcord.ext.commands.has_any_role:5 of
msgid "Similar to :func:`.has_role`\\, the names or IDs passed in must be exact."
msgstr ""

#: hcord.ext.commands.has_any_role:7 of
msgid ""
"This check raises one of two special exceptions, :exc:`.MissingAnyRole` "
"if the user is missing all roles, or :exc:`.NoPrivateMessage` if it is "
"used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.has_any_role:13 of
msgid ""
"Raise :exc:`.MissingAnyRole` or :exc:`.NoPrivateMessage` instead of "
"generic :exc:`.CheckFailure`"
msgstr ""

#: hcord.ext.commands.has_any_role:16 of
msgid "An argument list of names or IDs to check that the member has roles wise."
msgstr ""

#: hcord.ext.commands.bot_has_role:1 of
msgid "Similar to :func:`.has_role` except checks if the bot itself has the role."
msgstr ""

#: hcord.ext.commands.bot_has_role:4 of
msgid ""
"This check raises one of two special exceptions, :exc:`.BotMissingRole` "
"if the bot is missing the role, or :exc:`.NoPrivateMessage` if it is used"
" in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.bot_has_role:10 of
msgid ""
"Raise :exc:`.BotMissingRole` or :exc:`.NoPrivateMessage` instead of "
"generic :exc:`.CheckFailure`"
msgstr ""

#: hcord.ext.commands.bot_has_permissions:1 of
msgid ""
"Similar to :func:`.has_permissions` except checks if the bot itself has "
"the permissions listed."
msgstr ""

#: hcord.ext.commands.bot_has_permissions:4 of
msgid ""
"This check raises a special exception, :exc:`.BotMissingPermissions` that"
" is inherited from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.bot_has_guild_permissions:1 of
msgid ""
"Similar to :func:`.has_guild_permissions`, but checks the bot members "
"guild permissions."
msgstr ""

#: hcord.ext.commands.bot_has_any_role:1 of
msgid ""
"Similar to :func:`.has_any_role` except checks if the bot itself has any "
"of the roles listed."
msgstr ""

#: hcord.ext.commands.bot_has_any_role:4 of
msgid ""
"This check raises one of two special exceptions, "
":exc:`.BotMissingAnyRole` if the bot is missing all roles, or "
":exc:`.NoPrivateMessage` if it is used in a private message. Both inherit"
" from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.bot_has_any_role:10 of
msgid ""
"Raise :exc:`.BotMissingAnyRole` or :exc:`.NoPrivateMessage` instead of "
"generic checkfailure"
msgstr ""

#: hcord.ext.commands.cooldown:1 of
#, fuzzy
msgid "A decorator that adds a cooldown to a :class:`.Command`"
msgstr "Botにグローバルチェックを追加するデコレーター"

#: hcord.ext.commands.cooldown:3 of
msgid ""
"A cooldown allows a command to only be used a specific amount of times in"
" a specific time frame. These cooldowns can be based either on a per-"
"guild, per-channel, per-user, per-role or global basis. Denoted by the "
"third argument of ``type`` which must be of enum type "
":class:`.BucketType`."
msgstr ""

#: hcord.ext.commands.cooldown:9 of
msgid ""
"If a cooldown is triggered, then :exc:`.CommandOnCooldown` is triggered "
"in :func:`.on_command_error` and the local error handler."
msgstr ""

#: hcord.ext.commands.cooldown:12 of
msgid "A command can only have a single cooldown."
msgstr ""

#: hcord.ext.commands.cooldown:14 of
msgid "The number of times a command can be used before triggering a cooldown."
msgstr ""

#: hcord.ext.commands.cooldown:16 of
msgid "The amount of seconds to wait for a cooldown when it's been triggered."
msgstr ""

#: hcord.ext.commands.cooldown:18 of
msgid "The type of cooldown to have."
msgstr ""

#: hcord.ext.commands.max_concurrency:1 of
msgid ""
"A decorator that adds a maximum concurrency to a :class:`.Command` or its"
" subclasses."
msgstr ""

#: hcord.ext.commands.max_concurrency:3 of
msgid ""
"This enables you to only allow a certain number of command invocations at"
" the same time, for example if a command takes too long or if only one "
"user can use it at a time. This differs from a cooldown in that there is "
"no set waiting period or token bucket -- only a set number of people can "
"run the command."
msgstr ""

#: hcord.ext.commands.max_concurrency:10 of
msgid ""
"The maximum number of invocations of this command that can be running at "
"the same time."
msgstr ""

#: hcord.ext.commands.max_concurrency:12 of
msgid ""
"The bucket that this concurrency is based on, e.g. ``BucketType.guild`` "
"would allow it to be used up to ``number`` times per guild."
msgstr ""

#: hcord.ext.commands.max_concurrency:15 of
msgid ""
"Whether the command should wait for the queue to be over. If this is set "
"to ``False`` then instead of waiting until the command can run again, the"
" command raises :exc:`.MaxConcurrencyReached` to its error handler. If "
"this is set to ``True`` then the command waits until it can be executed."
msgstr ""

#: hcord.ext.commands.before_invoke:3 of
msgid ""
"This allows you to refer to one before invoke hook for several commands "
"that do not have to be within the same cog."
msgstr ""

#: hcord.ext.commands.after_invoke:3 of
msgid ""
"This allows you to refer to one after invoke hook for several commands "
"that do not have to be within the same cog."
msgstr ""

#: hcord.ext.commands.guild_only:1 of
msgid ""
"A :func:`.check` that indicates this command must only be used in a guild"
" context only. Basically, no private messages are allowed when using the "
"command."
msgstr ""

#: hcord.ext.commands.guild_only:5 of
msgid ""
"This check raises a special exception, :exc:`.NoPrivateMessage` that is "
"inherited from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.dm_only:1 of
msgid ""
"A :func:`.check` that indicates this command must only be used in a DM "
"context. Only private messages are allowed when using the command."
msgstr ""

#: hcord.ext.commands.dm_only:5 of
msgid ""
"This check raises a special exception, :exc:`.PrivateMessageOnly` that is"
" inherited from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.is_owner:1 of
msgid ""
"A :func:`.check` that checks if the person invoking this command is the "
"owner of the bot."
msgstr ""

#: hcord.ext.commands.is_owner:4 of
msgid "This is powered by :meth:`.Bot.is_owner`."
msgstr ""

#: hcord.ext.commands.is_owner:6 of
msgid ""
"This check raises a special exception, :exc:`.NotOwner` that is derived "
"from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.is_nsfw:1 of
msgid "A :func:`.check` that checks if the channel is a NSFW channel."
msgstr ""

#: hcord.ext.commands.is_nsfw:3 of
msgid ""
"This check raises a special exception, :exc:`.NSFWChannelRequired` that "
"is derived from :exc:`.CheckFailure`."
msgstr ""

#: hcord.ext.commands.is_nsfw:8 of
msgid ""
"Raise :exc:`.NSFWChannelRequired` instead of generic "
":exc:`.CheckFailure`. DM channels will also now pass this check."
msgstr ""

#: ../../ext/commands/api.rst:191
msgid "Context"
msgstr ""

#: hcord.ext.commands.Context:1 of
msgid "Represents the context in which a command is being invoked under."
msgstr ""

#: hcord.ext.commands.Context:3 of
msgid ""
"This class contains a lot of meta data to help you understand more about "
"the invocation context. This class is not created manually and is instead"
" passed around to commands as the first parameter."
msgstr ""

#: hcord.ext.commands.Context:7 of
msgid "This class implements the :class:`~hcord.abc.Messageable` ABC."
msgstr ""

#: hcord.ext.commands.Context:11 of
msgid "The message that triggered the command being executed."
msgstr ""

#: hcord.ext.commands.Context:13 of
#, fuzzy
msgid ":class:`.Message`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Context:17 of
msgid "The bot that contains the command being executed."
msgstr ""

#: hcord.ext.commands.Context:19 of
#, fuzzy
msgid ":class:`.Bot`"
msgstr ":class:`.AppInfo`"

#: hcord.ext.commands.Context:23 of
msgid ""
"The list of transformed arguments that were passed into the command. If "
"this is accessed during the :func:`on_command_error` event then this list"
" could be incomplete."
msgstr ""

#: hcord.ext.commands.BotMissingPermissions:10
#: hcord.ext.commands.Context:27 hcord.ext.commands.MissingPermissions:10
#: of
#, fuzzy
msgid ":class:`list`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.Context:31 of
msgid ""
"A dictionary of transformed arguments that were passed into the command. "
"Similar to :attr:`args`\\, if this is accessed in the "
":func:`on_command_error` event then this dict could be incomplete."
msgstr ""

#: hcord.ext.commands.Context:39 of
msgid "The prefix that was used to invoke the command."
msgstr ""

#: hcord.ext.commands.Context:45 of
msgid "The command that is being invoked currently."
msgstr ""

#: hcord.ext.commands.Context:51 of
msgid ""
"The command name that triggered this invocation. Useful for finding out "
"which alias called the command."
msgstr ""

#: hcord.ext.commands.Context:58 of
msgid ""
"The subcommand that was invoked. If no valid subcommand was invoked then "
"this is equal to ``None``."
msgstr ""

#: hcord.ext.commands.Context:65 of
msgid ""
"The string that was attempted to call a subcommand. This does not have to"
" point to a valid registered subcommand and could just point to a "
"nonsense string. If nothing was passed to attempt a call to a subcommand "
"then this is set to ``None``."
msgstr ""

#: hcord.ext.commands.Context:74 of
msgid ""
"A boolean that indicates if the command failed to be parsed, checked, or "
"invoked."
msgstr ""

#: hcord.ext.commands.Context.history:1 of
msgid ""
"Returns an :class:`~hcord.AsyncIterator` that enables receiving the "
"destination's message history."
msgstr ""

#: hcord.ext.commands.Context.history:3 of
#, fuzzy
msgid ""
"You must have :attr:`~Permissions.read_message_history` permissions to "
"use this."
msgstr "これを行うには、関連付けられたGuildにて、 :attr:`~.Permissions.manage_channels` 権限が必要です。"

#: hcord.ext.commands.Context.history:14 of
msgid "Flattening into a list: ::"
msgstr ""

#: hcord.ext.commands.Context.history:21 of
msgid ""
"The number of messages to retrieve. If ``None``, retrieves every message "
"in the channel. Note, however, that this would make it a slow operation."
msgstr ""

#: hcord.ext.commands.Context.history:25 of
msgid ""
"Retrieve messages before this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""

#: hcord.ext.commands.Context.history:28 of
msgid ""
"Retrieve messages after this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""

#: hcord.ext.commands.Context.history:31 of
msgid ""
"Retrieve messages around this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time. When using this "
"argument, the maximum limit is 101. Note that if the limit is an even "
"number then this will return at most limit + 1 messages."
msgstr ""

#: hcord.ext.commands.Context.history:36 of
msgid ""
"If set to ``True``, return messages in oldest->newest order. Defaults to "
"``True`` if ``after`` is specified, otherwise ``False``."
msgstr ""

#: hcord.ext.commands.Context.history:40 of
#, fuzzy
msgid "You do not have permissions to get channel message history."
msgstr ":exc:`.Forbidden` -- 指定のチャンネルを取得する権限がない。"

#: hcord.ext.commands.Context.history:41 of
msgid "The request to get message history failed."
msgstr ""

#: hcord.ext.commands.Context.history:43 of
msgid ":class:`~hcord.Message` -- The message with the message data parsed."
msgstr ""

#: hcord.ext.commands.Context.typing:1 of
msgid ""
"Returns a context manager that allows you to type for an indefinite "
"period of time."
msgstr ""

#: hcord.ext.commands.Context.typing:3 of
msgid "This is useful for denoting long computations in your bot."
msgstr ""

#: hcord.ext.commands.Context.typing:7 of
msgid ""
"This is both a regular context manager and an async context manager. This"
" means that both ``with`` and ``async with`` work with this."
msgstr ""

#: hcord.ext.commands.Context.typing:10 of
msgid "Example Usage: ::"
msgstr ""

#: hcord.ext.commands.Context.invoke:3 of
msgid "Calls a command with the arguments given."
msgstr ""

#: hcord.ext.commands.Context.invoke:5 of
msgid ""
"This is useful if you want to just call the callback that a "
":class:`.Command` holds internally."
msgstr ""

#: hcord.ext.commands.Context.invoke:10 of
msgid ""
"This does not handle converters, checks, cooldowns, pre-invoke, or after-"
"invoke hooks in any matter. It calls the internal callback directly as-if"
" it was a regular function."
msgstr ""

#: hcord.ext.commands.Context.invoke:14 of
msgid ""
"You must take care in passing the proper arguments when using this "
"function."
msgstr ""

#: hcord.ext.commands.Context.invoke:19 of
msgid "The first parameter passed **must** be the command being invoked."
msgstr ""

#: hcord.ext.commands.Context.invoke:21 of
msgid "The command that is going to be called."
msgstr ""

#: hcord.ext.commands.Context.invoke:23 of
msgid "The arguments to to use."
msgstr ""

#: hcord.ext.commands.Context.invoke:24 of
msgid "The keyword arguments to use."
msgstr ""

#: hcord.ext.commands.Context.invoke:26 of
msgid "The command argument to invoke is missing."
msgstr ""

#: hcord.ext.commands.Context.reinvoke:3 of
msgid "Calls the command again."
msgstr ""

#: hcord.ext.commands.Context.reinvoke:5 of
msgid ""
"This is similar to :meth:`~.Context.invoke` except that it bypasses "
"checks, cooldowns, and error handlers."
msgstr ""

#: hcord.ext.commands.Context.reinvoke:10 of
msgid ""
"If you want to bypass :exc:`.UserInputError` derived exceptions, it is "
"recommended to use the regular :meth:`~.Context.invoke` as it will work "
"more naturally. After all, this will end up using the old arguments the "
"user has used and will thus just fail again."
msgstr ""

#: hcord.ext.commands.Context.reinvoke:16 of
msgid "Whether to call the before and after invoke hooks."
msgstr ""

#: hcord.ext.commands.Context.reinvoke:18 of
msgid ""
"Whether to start the call chain from the very beginning or where we left "
"off (i.e. the command that caused the error). The default is to start "
"where we left off."
msgstr ""

#: hcord.ext.commands.Context.reinvoke:23 of
msgid "The context to reinvoke is not valid."
msgstr ""

#: hcord.ext.commands.Context.valid:1 of
msgid "Checks if the invocation context is valid to be invoked with."
msgstr ""

#: hcord.ext.commands.Context.cog:1 of
msgid ""
"Returns the cog associated with this context's command. None if it does "
"not exist."
msgstr ""

#: hcord.ext.commands.Context.cog:3 of
#, fuzzy
msgid ":class:`.Cog`"
msgstr ":class:`.AppInfo`"

#: hcord.ext.commands.Context.guild:1 of
msgid ""
"Returns the guild associated with this context's command. None if not "
"available."
msgstr ""

#: hcord.ext.commands.Context.channel:1 of
msgid ""
":class:`.TextChannel`: Returns the channel associated with this context's"
" command. Shorthand for :attr:`.Message.channel`."
msgstr ""

#: hcord.ext.commands.Context.author:1 of
msgid ""
"Union[:class:`~hcord.User`, :class:`.Member`]: Returns the author "
"associated with this context's command. Shorthand for "
":attr:`.Message.author`"
msgstr ""

#: hcord.ext.commands.Context.me:1 of
msgid ""
"Union[:class:`.Member`, :class:`.ClientUser`]: Similar to "
":attr:`.Guild.me` except it may return the :class:`.ClientUser` in "
"private message contexts."
msgstr ""

#: hcord.ext.commands.Context.voice_client:1 of
msgid "A shortcut to :attr:`.Guild.voice_client`\\, if applicable."
msgstr ""

#: hcord.ext.commands.Context.voice_client:3 of
msgid "Optional[:class:`.VoiceProtocol`]"
msgstr ""

#: hcord.ext.commands.Context.send_help:3 of
msgid ""
"Shows the help command for the specified entity if given. The entity can "
"be a command or a cog."
msgstr ""

#: hcord.ext.commands.Context.send_help:6 of
msgid "If no entity is given, then it'll show help for the entire bot."
msgstr ""

#: hcord.ext.commands.Context.send_help:9 of
msgid ""
"If the entity is a string, then it looks up whether it's a :class:`Cog` "
"or a :class:`Command`."
msgstr ""

#: hcord.ext.commands.Context.send_help:14 of
msgid ""
"Due to the way this function works, instead of returning something "
"similar to :meth:`~.commands.HelpCommand.command_not_found` this returns "
":class:`None` on bad input or no help command."
msgstr ""

#: hcord.ext.commands.Context.send_help:18 of
msgid "The entity to show help for."
msgstr ""

#: hcord.ext.commands.Context.send_help:21 of
msgid "The result of the help command, if any."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:3 of
msgid "Retrieves a single :class:`~hcord.Message` from the destination."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:5 of
msgid "This can only be used by bot accounts."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:7 of
msgid "The message ID to look for."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:10 of
msgid "The specified message was not found."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:11 of
msgid "You do not have the permissions required to get a message."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:12 of
msgid "Retrieving the message failed."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:14 of
msgid "The message asked for."
msgstr ""

#: hcord.ext.commands.Context.fetch_message:15
#: hcord.ext.commands.Context.send:49 of
msgid ":class:`~hcord.Message`"
msgstr ""

#: hcord.ext.commands.Context.pins:3 of
msgid "Retrieves all messages that are currently pinned in the channel."
msgstr ""

#: hcord.ext.commands.Context.pins:7 of
msgid ""
"Due to a limitation with the Discord API, the :class:`.Message` objects "
"returned by this method do not contain complete "
":attr:`.Message.reactions` data."
msgstr ""

#: hcord.ext.commands.Context.pins:11 of
msgid "Retrieving the pinned messages failed."
msgstr ""

#: hcord.ext.commands.Context.pins:13 of
msgid "The messages that are currently pinned."
msgstr ""

#: hcord.ext.commands.Context.pins:14 of
msgid "List[:class:`~hcord.Message`]"
msgstr ""

#: hcord.ext.commands.Context.send:3 of
msgid "Sends a message to the destination with the content given."
msgstr ""

#: hcord.ext.commands.Context.send:5 of
msgid ""
"The content must be a type that can convert to a string through "
"``str(content)``. If the content is set to ``None`` (the default), then "
"the ``embed`` parameter must be provided."
msgstr ""

#: hcord.ext.commands.Context.send:9 of
msgid ""
"To upload a single file, the ``file`` parameter should be used with a "
"single :class:`~hcord.File` object. To upload multiple files, the "
"``files`` parameter should be used with a :class:`list` of "
":class:`~hcord.File` objects. **Specifying both parameters will lead to"
" an exception**."
msgstr ""

#: hcord.ext.commands.Context.send:14 of
msgid ""
"If the ``embed`` parameter is provided, it must be of type "
":class:`~hcord.Embed` and it must be a rich embed type."
msgstr ""

#: hcord.ext.commands.Context.send:17 of
msgid "The content of the message to send."
msgstr ""

#: hcord.ext.commands.Context.send:19 of
msgid "Indicates if the message should be sent using text-to-speech."
msgstr ""

#: hcord.ext.commands.Context.send:21 of
msgid "The rich embed for the content."
msgstr ""

#: hcord.ext.commands.Context.send:23 of
msgid "The file to upload."
msgstr ""

#: hcord.ext.commands.Context.send:25 of
msgid "A list of files to upload. Must be a maximum of 10."
msgstr ""

#: hcord.ext.commands.Context.send:27 of
msgid ""
"The nonce to use for sending this message. If the message was "
"successfully sent, then the message will have a nonce with this value."
msgstr ""

#: hcord.ext.commands.Context.send:30 of
msgid ""
"If provided, the number of seconds to wait in the background before "
"deleting the message we just sent. If the deletion fails, then it is "
"silently ignored."
msgstr ""

#: hcord.ext.commands.Context.send:34 of
msgid ""
"Controls the mentions being processed in this message. If this is passed,"
" then the object is merged with :attr:`~hcord.Client.allowed_mentions`."
" The merging behaviour only overrides attributes that have been "
"explicitly passed to the object, otherwise it uses the attributes set in "
":attr:`~hcord.Client.allowed_mentions`. If no object is passed at all "
"then the defaults given by :attr:`~hcord.Client.allowed_mentions` are "
"used instead.  .. versionadded:: 1.4"
msgstr ""

#: hcord.ext.commands.Context.send:34 of
msgid ""
"Controls the mentions being processed in this message. If this is passed,"
" then the object is merged with :attr:`~hcord.Client.allowed_mentions`."
" The merging behaviour only overrides attributes that have been "
"explicitly passed to the object, otherwise it uses the attributes set in "
":attr:`~hcord.Client.allowed_mentions`. If no object is passed at all "
"then the defaults given by :attr:`~hcord.Client.allowed_mentions` are "
"used instead."
msgstr ""

#: hcord.ext.commands.Context.send:44 of
msgid "Sending the message failed."
msgstr ""

#: hcord.ext.commands.Context.send:45 of
msgid "You do not have the proper permissions to send the message."
msgstr ""

#: hcord.ext.commands.Context.send:46 of
msgid ""
"The ``files`` list is not of the appropriate size or     you specified "
"both ``file`` and ``files``."
msgstr ""

#: hcord.ext.commands.Context.send:48 of
msgid "The message that was sent."
msgstr ""

#: hcord.ext.commands.Context.trigger_typing:3 of
msgid "Triggers a *typing* indicator to the destination."
msgstr ""

#: hcord.ext.commands.Context.trigger_typing:5 of
msgid ""
"*Typing* indicator will go away after 10 seconds, or after a message is "
"sent."
msgstr ""

#: ../../ext/commands/api.rst:207
msgid "Converters"
msgstr ""

#: hcord.ext.commands.Converter:1 of
msgid ""
"The base class of custom converters that require the :class:`.Context` to"
" be passed to be useful."
msgstr ""

#: hcord.ext.commands.Converter:4 of
msgid ""
"This allows you to implement converters that function similar to the "
"special cased ``discord`` classes."
msgstr ""

#: hcord.ext.commands.Converter:7 of
msgid ""
"Classes that derive from this should override the "
":meth:`~.Converter.convert` method to do its conversion logic. This "
"method must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter.convert:3
#: hcord.ext.commands.ColourConverter.convert:3
#: hcord.ext.commands.Converter.convert:3
#: hcord.ext.commands.EmojiConverter.convert:3
#: hcord.ext.commands.GameConverter.convert:3
#: hcord.ext.commands.InviteConverter.convert:3
#: hcord.ext.commands.MemberConverter.convert:3
#: hcord.ext.commands.MessageConverter.convert:3
#: hcord.ext.commands.PartialEmojiConverter.convert:3
#: hcord.ext.commands.RoleConverter.convert:3
#: hcord.ext.commands.TextChannelConverter.convert:3
#: hcord.ext.commands.UserConverter.convert:3
#: hcord.ext.commands.VoiceChannelConverter.convert:3
#: hcord.ext.commands.clean_content.convert:3 of
msgid "The method to override to do conversion logic."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter.convert:5
#: hcord.ext.commands.ColourConverter.convert:5
#: hcord.ext.commands.Converter.convert:5
#: hcord.ext.commands.EmojiConverter.convert:5
#: hcord.ext.commands.GameConverter.convert:5
#: hcord.ext.commands.InviteConverter.convert:5
#: hcord.ext.commands.MemberConverter.convert:5
#: hcord.ext.commands.MessageConverter.convert:5
#: hcord.ext.commands.PartialEmojiConverter.convert:5
#: hcord.ext.commands.RoleConverter.convert:5
#: hcord.ext.commands.TextChannelConverter.convert:5
#: hcord.ext.commands.UserConverter.convert:5
#: hcord.ext.commands.VoiceChannelConverter.convert:5
#: hcord.ext.commands.clean_content.convert:5 of
msgid ""
"If an error is found while converting, it is recommended to raise a "
":exc:`.CommandError` derived exception as it will properly propagate to "
"the error handlers."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter.convert:9
#: hcord.ext.commands.ColourConverter.convert:9
#: hcord.ext.commands.Converter.convert:9
#: hcord.ext.commands.EmojiConverter.convert:9
#: hcord.ext.commands.GameConverter.convert:9
#: hcord.ext.commands.InviteConverter.convert:9
#: hcord.ext.commands.MemberConverter.convert:9
#: hcord.ext.commands.MessageConverter.convert:9
#: hcord.ext.commands.PartialEmojiConverter.convert:9
#: hcord.ext.commands.RoleConverter.convert:9
#: hcord.ext.commands.TextChannelConverter.convert:9
#: hcord.ext.commands.UserConverter.convert:9
#: hcord.ext.commands.VoiceChannelConverter.convert:9
#: hcord.ext.commands.clean_content.convert:9 of
msgid "The invocation context that the argument is being used in."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter.convert:11
#: hcord.ext.commands.ColourConverter.convert:11
#: hcord.ext.commands.Converter.convert:11
#: hcord.ext.commands.EmojiConverter.convert:11
#: hcord.ext.commands.GameConverter.convert:11
#: hcord.ext.commands.InviteConverter.convert:11
#: hcord.ext.commands.MemberConverter.convert:11
#: hcord.ext.commands.MessageConverter.convert:11
#: hcord.ext.commands.PartialEmojiConverter.convert:11
#: hcord.ext.commands.RoleConverter.convert:11
#: hcord.ext.commands.TextChannelConverter.convert:11
#: hcord.ext.commands.UserConverter.convert:11
#: hcord.ext.commands.VoiceChannelConverter.convert:11
#: hcord.ext.commands.clean_content.convert:11 of
msgid "The argument that is being converted."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter.convert:14
#: hcord.ext.commands.ColourConverter.convert:14
#: hcord.ext.commands.Converter.convert:14
#: hcord.ext.commands.EmojiConverter.convert:14
#: hcord.ext.commands.GameConverter.convert:14
#: hcord.ext.commands.InviteConverter.convert:14
#: hcord.ext.commands.MemberConverter.convert:14
#: hcord.ext.commands.MessageConverter.convert:14
#: hcord.ext.commands.PartialEmojiConverter.convert:14
#: hcord.ext.commands.RoleConverter.convert:14
#: hcord.ext.commands.TextChannelConverter.convert:14
#: hcord.ext.commands.UserConverter.convert:14
#: hcord.ext.commands.VoiceChannelConverter.convert:14
#: hcord.ext.commands.clean_content.convert:14 of
msgid "A generic exception occurred when converting the argument."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter.convert:15
#: hcord.ext.commands.ColourConverter.convert:15
#: hcord.ext.commands.Converter.convert:15
#: hcord.ext.commands.EmojiConverter.convert:15
#: hcord.ext.commands.GameConverter.convert:15
#: hcord.ext.commands.InviteConverter.convert:15
#: hcord.ext.commands.MemberConverter.convert:15
#: hcord.ext.commands.MessageConverter.convert:15
#: hcord.ext.commands.PartialEmojiConverter.convert:15
#: hcord.ext.commands.RoleConverter.convert:15
#: hcord.ext.commands.TextChannelConverter.convert:15
#: hcord.ext.commands.UserConverter.convert:15
#: hcord.ext.commands.VoiceChannelConverter.convert:15
#: hcord.ext.commands.clean_content.convert:15 of
msgid "The converter failed to convert the argument."
msgstr ""

#: hcord.ext.commands.MemberConverter:1 of
msgid "Converts to a :class:`~hcord.Member`."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter:3
#: hcord.ext.commands.MemberConverter:3 hcord.ext.commands.RoleConverter:3
#: hcord.ext.commands.TextChannelConverter:3
#: hcord.ext.commands.VoiceChannelConverter:3 of
msgid ""
"All lookups are via the local guild. If in a DM context, then the lookup "
"is done by the global cache."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter:6
#: hcord.ext.commands.EmojiConverter:6 hcord.ext.commands.MemberConverter:6
#: hcord.ext.commands.MessageConverter:5 hcord.ext.commands.RoleConverter:6
#: hcord.ext.commands.TextChannelConverter:6
#: hcord.ext.commands.UserConverter:5
#: hcord.ext.commands.VoiceChannelConverter:6 of
msgid "The lookup strategy is as follows (in order):"
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter:8
#: hcord.ext.commands.EmojiConverter:8 hcord.ext.commands.MemberConverter:8
#: hcord.ext.commands.RoleConverter:8
#: hcord.ext.commands.TextChannelConverter:8
#: hcord.ext.commands.UserConverter:7
#: hcord.ext.commands.VoiceChannelConverter:8 of
msgid "Lookup by ID."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter:9
#: hcord.ext.commands.MemberConverter:9 hcord.ext.commands.RoleConverter:9
#: hcord.ext.commands.TextChannelConverter:9
#: hcord.ext.commands.UserConverter:8
#: hcord.ext.commands.VoiceChannelConverter:9 of
msgid "Lookup by mention."
msgstr ""

#: hcord.ext.commands.MemberConverter:10 hcord.ext.commands.UserConverter:9
#: of
msgid "Lookup by name#discrim"
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter:10
#: hcord.ext.commands.EmojiConverter:10
#: hcord.ext.commands.MemberConverter:11
#: hcord.ext.commands.RoleConverter:10
#: hcord.ext.commands.TextChannelConverter:10
#: hcord.ext.commands.UserConverter:10
#: hcord.ext.commands.VoiceChannelConverter:10 of
msgid "Lookup by name"
msgstr ""

#: hcord.ext.commands.MemberConverter:12 of
msgid "Lookup by nickname"
msgstr ""

#: hcord.ext.commands.MemberConverter:14 of
msgid "Raise :exc:`.MemberNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.MemberConverter:17 of
msgid ""
"This converter now lazily fetches members from the gateway and HTTP APIs,"
" optionally caching the result if :attr:`.MemberCacheFlags.joined` is "
"enabled."
msgstr ""

#: hcord.ext.commands.UserConverter:1 of
msgid "Converts to a :class:`~hcord.User`."
msgstr ""

#: hcord.ext.commands.UserConverter:3 of
msgid "All lookups are via the global user cache."
msgstr ""

#: hcord.ext.commands.UserConverter:12 of
msgid "Raise :exc:`.UserNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.MessageConverter:1 of
msgid "Converts to a :class:`hcord.Message`."
msgstr ""

#: hcord.ext.commands.MessageConverter:7 of
msgid ""
"Lookup by \"{channel ID}-{message ID}\" (retrieved by shift-clicking on "
"\"Copy ID\")"
msgstr ""

#: hcord.ext.commands.MessageConverter:8 of
msgid "Lookup by message ID (the message **must** be in the context channel)"
msgstr ""

#: hcord.ext.commands.MessageConverter:9 of
msgid "Lookup by message URL"
msgstr ""

#: hcord.ext.commands.MessageConverter:11 of
msgid ""
"Raise :exc:`.ChannelNotFound`, `MessageNotFound` or `ChannelNotReadable` "
"instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.TextChannelConverter:1 of
msgid "Converts to a :class:`~hcord.TextChannel`."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter:12
#: hcord.ext.commands.TextChannelConverter:12
#: hcord.ext.commands.VoiceChannelConverter:12 of
msgid "Raise :exc:`.ChannelNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.VoiceChannelConverter:1 of
msgid "Converts to a :class:`~hcord.VoiceChannel`."
msgstr ""

#: hcord.ext.commands.CategoryChannelConverter:1 of
msgid "Converts to a :class:`~hcord.CategoryChannel`."
msgstr ""

#: hcord.ext.commands.InviteConverter:1 of
msgid "Converts to a :class:`~hcord.Invite`."
msgstr ""

#: hcord.ext.commands.InviteConverter:3 of
msgid "This is done via an HTTP request using :meth:`.Bot.fetch_invite`."
msgstr ""

#: hcord.ext.commands.InviteConverter:5 of
msgid "Raise :exc:`.BadInviteArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.RoleConverter:1 of
msgid "Converts to a :class:`~hcord.Role`."
msgstr ""

#: hcord.ext.commands.RoleConverter:12 of
msgid "Raise :exc:`.RoleNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.GameConverter:1 of
msgid "Converts to :class:`~hcord.Game`."
msgstr ""

#: hcord.ext.commands.ColourConverter:1 of
msgid "Converts to a :class:`~hcord.Colour`."
msgstr ""

#: hcord.ext.commands.ColourConverter:3 of
msgid "Add an alias named ColorConverter"
msgstr ""

#: hcord.ext.commands.ColourConverter:6 of
msgid "The following formats are accepted:"
msgstr ""

#: hcord.ext.commands.ColourConverter:8 of
msgid "``0x<hex>``"
msgstr ""

#: hcord.ext.commands.ColourConverter:9 of
msgid "``#<hex>``"
msgstr ""

#: hcord.ext.commands.ColourConverter:10 of
msgid "``0x#<hex>``"
msgstr ""

#: hcord.ext.commands.ColourConverter:11 of
msgid "Any of the ``classmethod`` in :class:`Colour`"
msgstr ""

#: hcord.ext.commands.ColourConverter:13 of
msgid "The ``_`` in the name can be optionally replaced with spaces."
msgstr ""

#: hcord.ext.commands.ColourConverter:15 of
msgid "Raise :exc:`.BadColourArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.EmojiConverter:1 of
msgid "Converts to a :class:`~hcord.Emoji`."
msgstr ""

#: hcord.ext.commands.EmojiConverter:3 of
msgid ""
"All lookups are done for the local guild first, if available. If that "
"lookup fails, then it checks the client's global cache."
msgstr ""

#: hcord.ext.commands.EmojiConverter:9 of
msgid "Lookup by extracting ID from the emoji."
msgstr ""

#: hcord.ext.commands.EmojiConverter:12 of
msgid "Raise :exc:`.EmojiNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.PartialEmojiConverter:1 of
msgid "Converts to a :class:`~hcord.PartialEmoji`."
msgstr ""

#: hcord.ext.commands.PartialEmojiConverter:3 of
msgid "This is done by extracting the animated flag, name and ID from the emoji."
msgstr ""

#: hcord.ext.commands.PartialEmojiConverter:5 of
msgid ""
"Raise :exc:`.PartialEmojiConversionFailure` instead of generic "
":exc:`.BadArgument`"
msgstr ""

#: hcord.ext.commands.clean_content:1 of
msgid "Converts the argument to mention scrubbed version of said content."
msgstr ""

#: hcord.ext.commands.clean_content:4 of
msgid "This behaves similarly to :attr:`~hcord.Message.clean_content`."
msgstr ""

#: hcord.ext.commands.clean_content:8 of
msgid "Whether to clean channel mentions."
msgstr ""

#: hcord.ext.commands.clean_content:14 of
msgid "Whether to use nicknames when transforming mentions."
msgstr ""

#: hcord.ext.commands.clean_content:20 of
msgid "Whether to also escape special markdown characters."
msgstr ""

#: ../../ext/commands/api.rst:253
msgid ""
"A special converter that greedily consumes arguments until it can't. As a"
" consequence of this behaviour, most input errors are silently discarded,"
" since it is used as an indicator of when to stop parsing."
msgstr ""

#: ../../ext/commands/api.rst:257
msgid ""
"When a parser error is met the greedy converter stops converting, undoes "
"the internal string parsing routine, and continues parsing regularly."
msgstr ""

#: ../../ext/commands/api.rst:260
msgid "For example, in the following code:"
msgstr ""

#: ../../ext/commands/api.rst:268
msgid ""
"An invocation of ``[p]test 1 2 3 4 5 6 hello`` would pass ``numbers`` "
"with ``[1, 2, 3, 4, 5, 6]`` and ``reason`` with ``hello``\\."
msgstr ""

#: ../../ext/commands/api.rst:271
msgid "For more information, check :ref:`ext_commands_special_converters`."
msgstr ""

#: ../../ext/commands/api.rst:276
msgid "Exceptions"
msgstr ""

#: hcord.ext.commands.CommandError:1 of
msgid "The base exception type for all command related errors."
msgstr "コマンドに関連するエラーすべての基礎となる例外。"

#: hcord.ext.commands.CommandError:3 of
msgid "This inherits from :exc:`hcord.DiscordException`."
msgstr "これは :exc:`hcord.DiscordException` を継承しています。"

#: hcord.ext.commands.CommandError:5 of
msgid ""
"This exception and exceptions inherited from it are handled in a special "
"way as they are caught and passed into a special event from "
":class:`.Bot`\\, :func:`on_command_error`."
msgstr ""

#: hcord.ext.commands.ConversionError:1 of
msgid "Exception raised when a Converter class raises non-CommandError."
msgstr "Converter クラスで、CommandErrorではない例外が発生した際に、発生する例外。"

#: hcord.ext.commands.CommandNotFound:7
#: hcord.ext.commands.ConversionError:3
#: hcord.ext.commands.MaxConcurrencyReached:3
#: hcord.ext.commands.UserInputError:4 of
msgid "This inherits from :exc:`CommandError`."
msgstr ""

#: hcord.ext.commands.ConversionError:7 of
msgid "The converter that failed."
msgstr ""

#: hcord.ext.commands.ConversionError:9 of
msgid ":class:`hcord.ext.commands.Converter`"
msgstr ""

#: hcord.ext.commands.CommandInvokeError:7
#: hcord.ext.commands.ConversionError:13
#: hcord.ext.commands.ExtensionFailed:13 of
msgid ""
"The original exception that was raised. You can also get this via the "
"``__cause__`` attribute."
msgstr "Converter内で発生した元の例外。 ``__cause__`` からも取得できます。"

#: hcord.ext.commands.CommandInvokeError:10
#: hcord.ext.commands.ConversionError:16
#: hcord.ext.commands.ExtensionFailed:16 of
msgid ":exc:`Exception`"
msgstr ""

#: hcord.ext.commands.MissingRequiredArgument:1 of
msgid ""
"Exception raised when parsing a command and a parameter that is required "
"is not encountered."
msgstr "コマンドのパラメータ解析の際、要求されたパラメータに値が渡されていない場合に発生します。"

#: hcord.ext.commands.BadArgument:4 hcord.ext.commands.BadUnionArgument:4
#: hcord.ext.commands.MissingRequiredArgument:4
#: hcord.ext.commands.TooManyArguments:4 of
msgid "This inherits from :exc:`UserInputError`"
msgstr ""

#: hcord.ext.commands.MissingRequiredArgument:8 of
msgid "The argument that is missing."
msgstr ""

#: hcord.ext.commands.BadUnionArgument:10
#: hcord.ext.commands.MissingRequiredArgument:10 of
msgid ":class:`inspect.Parameter`"
msgstr ""

#: hcord.ext.commands.ArgumentParsingError:1 of
msgid "An exception raised when the parser fails to parse a user's input."
msgstr ""

#: hcord.ext.commands.ArgumentParsingError:3 of
msgid "This inherits from :exc:`UserInputError`."
msgstr ""

#: hcord.ext.commands.ArgumentParsingError:5 of
msgid ""
"There are child classes that implement more granular parsing errors for "
"i18n purposes."
msgstr ""

#: hcord.ext.commands.UnexpectedQuoteError:1 of
msgid ""
"An exception raised when the parser encounters a quote mark inside a non-"
"quoted string."
msgstr ""

#: hcord.ext.commands.ExpectedClosingQuoteError:3
#: hcord.ext.commands.InvalidEndOfQuotedStringError:4
#: hcord.ext.commands.UnexpectedQuoteError:3 of
msgid "This inherits from :exc:`ArgumentParsingError`."
msgstr ""

#: hcord.ext.commands.UnexpectedQuoteError:7 of
msgid "The quote mark that was found inside the non-quoted string."
msgstr ""

#: hcord.ext.commands.InvalidEndOfQuotedStringError:1 of
msgid ""
"An exception raised when a space is expected after the closing quote in a"
" string but a different character is found."
msgstr ""

#: hcord.ext.commands.InvalidEndOfQuotedStringError:8 of
msgid "The character found instead of the expected string."
msgstr ""

#: hcord.ext.commands.ExpectedClosingQuoteError:1 of
msgid "An exception raised when a quote character is expected but not found."
msgstr ""

#: hcord.ext.commands.ExpectedClosingQuoteError:7 of
msgid "The quote character expected."
msgstr ""

#: hcord.ext.commands.BadArgument:1 of
msgid ""
"Exception raised when a parsing or conversion failure is encountered on "
"an argument to pass into a command."
msgstr "コマンドの引数に渡された値の解析、または変換に失敗した場合に発生する例外。"

#: hcord.ext.commands.BadUnionArgument:1 of
msgid ""
"Exception raised when a :data:`typing.Union` converter fails for all its "
"associated types."
msgstr ""

#: hcord.ext.commands.BadUnionArgument:8 of
msgid "The parameter that failed being converted."
msgstr ""

#: hcord.ext.commands.BadUnionArgument:14 of
msgid "A tuple of converters attempted in conversion, in order of failure."
msgstr ""

#: hcord.ext.commands.BadUnionArgument:16 of
msgid "Tuple[Type, ...]"
msgstr ""

#: hcord.ext.commands.BadUnionArgument:20 of
msgid "A list of errors that were caught from failing the conversion."
msgstr ""

#: hcord.ext.commands.BadUnionArgument:22 of
msgid "List[:class:`CommandError`]"
msgstr ""

#: hcord.ext.commands.PrivateMessageOnly:1 of
msgid ""
"Exception raised when an operation does not work outside of private "
"message contexts."
msgstr ""

#: hcord.ext.commands.BotMissingAnyRole:4
#: hcord.ext.commands.BotMissingPermissions:4
#: hcord.ext.commands.BotMissingRole:3 hcord.ext.commands.MissingAnyRole:4
#: hcord.ext.commands.MissingPermissions:4 hcord.ext.commands.MissingRole:3
#: hcord.ext.commands.NoPrivateMessage:4 hcord.ext.commands.NotOwner:3
#: hcord.ext.commands.PrivateMessageOnly:4 of
msgid "This inherits from :exc:`CheckFailure`"
msgstr ""

#: hcord.ext.commands.NoPrivateMessage:1 of
msgid ""
"Exception raised when an operation does not work in private message "
"contexts."
msgstr "プライベートメッセージコンテキストで、要求された処理が実行できない場合に発生する例外。"

#: hcord.ext.commands.CheckFailure:1 of
msgid ""
"Exception raised when the predicates in :attr:`.Command.checks` have "
"failed."
msgstr ""

#: hcord.ext.commands.CheckFailure:3
#: hcord.ext.commands.CommandInvokeError:3
#: hcord.ext.commands.CommandOnCooldown:3
#: hcord.ext.commands.DisabledCommand:3 of
msgid "This inherits from :exc:`CommandError`"
msgstr ""

#: hcord.ext.commands.CheckAnyFailure:1 of
msgid "Exception raised when all predicates in :func:`check_any` fail."
msgstr ""

#: hcord.ext.commands.CheckAnyFailure:3
#: hcord.ext.commands.NSFWChannelRequired:3 of
msgid "This inherits from :exc:`CheckFailure`."
msgstr ""

#: hcord.ext.commands.CheckAnyFailure:9 of
msgid "A list of errors that were caught during execution."
msgstr ""

#: hcord.ext.commands.CheckAnyFailure:11 of
msgid "List[:class:`CheckFailure`]"
msgstr ""

#: hcord.ext.commands.CheckAnyFailure:15 of
msgid "A list of check predicates that failed."
msgstr ""

#: hcord.ext.commands.CheckAnyFailure:17 of
msgid "List[Callable[[:class:`Context`], :class:`bool`]]"
msgstr ""

#: hcord.ext.commands.CommandNotFound:1 of
msgid ""
"Exception raised when a command is attempted to be invoked but no command"
" under that name is found."
msgstr "コマンドを呼び出す際に、指定された名前を持つコマンドが存在していなかった場合に発生する例外。"

#: hcord.ext.commands.CommandNotFound:4 of
msgid ""
"This is not raised for invalid subcommands, rather just the initial main "
"command that is attempted to be invoked."
msgstr ""

#: hcord.ext.commands.DisabledCommand:1 of
msgid "Exception raised when the command being invoked is disabled."
msgstr "呼び出そうとしたコマンドが無効化されていた際に発生する例外。"

#: hcord.ext.commands.CommandInvokeError:1 of
msgid "Exception raised when the command being invoked raised an exception."
msgstr ""

#: hcord.ext.commands.TooManyArguments:1 of
msgid ""
"Exception raised when the command was passed too many arguments and its "
":attr:`.Command.ignore_extra` attribute was not set to ``True``."
msgstr ""

#: hcord.ext.commands.UserInputError:1 of
msgid ""
"The base exception type for errors that involve errors regarding user "
"input."
msgstr ""

#: hcord.ext.commands.CommandOnCooldown:1 of
msgid "Exception raised when the command being invoked is on cooldown."
msgstr ""

#: hcord.ext.commands.CommandOnCooldown:7 of
msgid ""
"A class with attributes ``rate``, ``per``, and ``type`` similar to the "
":func:`.cooldown` decorator."
msgstr ""

#: hcord.ext.commands.CommandOnCooldown:10 of
msgid "Cooldown"
msgstr ""

#: hcord.ext.commands.CommandOnCooldown:14 of
msgid "The amount of seconds to wait before you can retry again."
msgstr ""

#: hcord.ext.commands.MaxConcurrencyReached:1 of
#, fuzzy
msgid ""
"Exception raised when the command being invoked has reached its maximum "
"concurrency."
msgstr "呼び出そうとしたコマンドが無効化されていた際に発生する例外。"

#: hcord.ext.commands.MaxConcurrencyReached:7 of
msgid "The maximum number of concurrent invokers allowed."
msgstr ""

#: hcord.ext.commands.MaxConcurrencyReached:13 of
msgid "The bucket type passed to the :func:`.max_concurrency` decorator."
msgstr ""

#: hcord.ext.commands.MaxConcurrencyReached:15 of
#, fuzzy
msgid ":class:`.BucketType`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.NotOwner:1 of
msgid "Exception raised when the message author is not the owner of the bot."
msgstr ""

#: hcord.ext.commands.MessageNotFound:1 of
msgid "Exception raised when the message provided was not found in the channel."
msgstr ""

#: hcord.ext.commands.BadBoolArgument:3
#: hcord.ext.commands.ChannelNotFound:3
#: hcord.ext.commands.ChannelNotReadable:4
#: hcord.ext.commands.EmojiNotFound:3 hcord.ext.commands.MemberNotFound:4
#: hcord.ext.commands.MessageNotFound:3
#: hcord.ext.commands.PartialEmojiConversionFailure:4
#: hcord.ext.commands.RoleNotFound:3 hcord.ext.commands.UserNotFound:4 of
#, fuzzy
msgid "This inherits from :exc:`BadArgument`"
msgstr "これは :exc:`hcord.DiscordException` を継承しています。"

#: hcord.ext.commands.MessageNotFound:9 of
msgid "The message supplied by the caller that was not found"
msgstr ""

#: hcord.ext.commands.MemberNotFound:1 of
msgid ""
"Exception raised when the member provided was not found in the bot's "
"cache."
msgstr ""

#: hcord.ext.commands.MemberNotFound:10 of
msgid "The member supplied by the caller that was not found"
msgstr ""

#: hcord.ext.commands.UserNotFound:1 of
msgid "Exception raised when the user provided was not found in the bot's cache."
msgstr ""

#: hcord.ext.commands.UserNotFound:10 of
msgid "The user supplied by the caller that was not found"
msgstr ""

#: hcord.ext.commands.ChannelNotFound:1 of
#, fuzzy
msgid "Exception raised when the bot can not find the channel."
msgstr "呼び出そうとしたコマンドが無効化されていた際に発生する例外。"

#: hcord.ext.commands.ChannelNotFound:9 of
msgid "The channel supplied by the caller that was not found"
msgstr ""

#: hcord.ext.commands.ChannelNotReadable:1 of
#, fuzzy
msgid ""
"Exception raised when the bot does not have permission to read messages "
"in the channel."
msgstr ":exc:`.Forbidden` -- 指定のチャンネルを取得する権限がない。"

#: hcord.ext.commands.ChannelNotReadable:10 of
msgid "The channel supplied by the caller that was not readable"
msgstr ""

#: hcord.ext.commands.ChannelNotReadable:12 of
#, fuzzy
msgid ":class:`.abc.GuildChannel`"
msgstr ":class:`.Guild`"

#: hcord.ext.commands.RoleNotFound:1 of
#, fuzzy
msgid "Exception raised when the bot can not find the role."
msgstr "呼び出そうとしたコマンドが無効化されていた際に発生する例外。"

#: hcord.ext.commands.RoleNotFound:9 of
msgid "The role supplied by the caller that was not found"
msgstr ""

#: hcord.ext.commands.EmojiNotFound:1 of
msgid "Exception raised when the bot can not find the emoji."
msgstr ""

#: hcord.ext.commands.EmojiNotFound:9 of
msgid "The emoji supplied by the caller that was not found"
msgstr ""

#: hcord.ext.commands.PartialEmojiConversionFailure:1 of
msgid ""
"Exception raised when the emoji provided does not match the correct "
"format."
msgstr ""

#: hcord.ext.commands.PartialEmojiConversionFailure:10 of
msgid "The emoji supplied by the caller that did not match the regex"
msgstr ""

#: hcord.ext.commands.BadBoolArgument:1 of
msgid "Exception raised when a boolean argument was not convertable."
msgstr ""

#: hcord.ext.commands.BadBoolArgument:9 of
msgid ""
"The boolean argument supplied by the caller that is not in the predefined"
" list"
msgstr ""

#: hcord.ext.commands.MissingPermissions:1 of
msgid ""
"Exception raised when the command invoker lacks permissions to run a "
"command."
msgstr ""

#: hcord.ext.commands.BotMissingPermissions:8
#: hcord.ext.commands.MissingPermissions:8 of
msgid "The required permissions that are missing."
msgstr ""

#: hcord.ext.commands.BotMissingPermissions:1 of
msgid "Exception raised when the bot's member lacks permissions to run a command."
msgstr ""

#: hcord.ext.commands.MissingRole:1 of
msgid "Exception raised when the command invoker lacks a role to run a command."
msgstr ""

#: hcord.ext.commands.BotMissingRole:9 hcord.ext.commands.MissingRole:9 of
msgid ""
"The required role that is missing. This is the parameter passed to "
":func:`~.commands.has_role`."
msgstr ""

#: hcord.ext.commands.BotMissingRole:12 hcord.ext.commands.MissingRole:12
#: of
msgid "Union[:class:`str`, :class:`int`]"
msgstr ""

#: hcord.ext.commands.BotMissingRole:1 of
msgid "Exception raised when the bot's member lacks a role to run a command."
msgstr ""

#: hcord.ext.commands.MissingAnyRole:1 of
msgid ""
"Exception raised when the command invoker lacks any of the roles "
"specified to run a command."
msgstr ""

#: hcord.ext.commands.MissingAnyRole:10 of
msgid ""
"The roles that the invoker is missing. These are the parameters passed to"
" :func:`~.commands.has_any_role`."
msgstr ""

#: hcord.ext.commands.BotMissingAnyRole:13
#: hcord.ext.commands.MissingAnyRole:13 of
msgid "List[Union[:class:`str`, :class:`int`]]"
msgstr ""

#: hcord.ext.commands.BotMissingAnyRole:1 of
msgid ""
"Exception raised when the bot's member lacks any of the roles specified "
"to run a command."
msgstr ""

#: hcord.ext.commands.BotMissingAnyRole:10 of
msgid ""
"The roles that the bot's member is missing. These are the parameters "
"passed to :func:`~.commands.has_any_role`."
msgstr ""

#: hcord.ext.commands.NSFWChannelRequired:1 of
msgid "Exception raised when a channel does not have the required NSFW setting."
msgstr ""

#: hcord.ext.commands.NSFWChannelRequired:7 of
msgid "The channel that does not have NSFW enabled."
msgstr ""

#: hcord.ext.commands.ExtensionError:1 of
msgid "Base exception for extension related errors."
msgstr ""

#: hcord.ext.commands.ExtensionError:3 of
msgid "This inherits from :exc:`~hcord.DiscordException`."
msgstr ""

#: hcord.ext.commands.ExtensionError:7 of
msgid "The extension that had an error."
msgstr ""

#: hcord.ext.commands.ExtensionAlreadyLoaded:1 of
msgid "An exception raised when an extension has already been loaded."
msgstr ""

#: hcord.ext.commands.ExtensionAlreadyLoaded:3
#: hcord.ext.commands.ExtensionFailed:3
#: hcord.ext.commands.ExtensionNotFound:3
#: hcord.ext.commands.ExtensionNotLoaded:3
#: hcord.ext.commands.NoEntryPointError:3 of
msgid "This inherits from :exc:`ExtensionError`"
msgstr ""

#: hcord.ext.commands.ExtensionNotLoaded:1 of
msgid "An exception raised when an extension was not loaded."
msgstr ""

#: hcord.ext.commands.NoEntryPointError:1 of
msgid ""
"An exception raised when an extension does not have a ``setup`` entry "
"point function."
msgstr ""

#: hcord.ext.commands.ExtensionFailed:1 of
msgid ""
"An exception raised when an extension failed to load during execution of "
"the module or ``setup`` entry point."
msgstr ""

#: hcord.ext.commands.ExtensionFailed:7
#: hcord.ext.commands.ExtensionNotFound:10 of
msgid "The extension that had the error."
msgstr ""

#: hcord.ext.commands.ExtensionNotFound:1 of
#, fuzzy
msgid "An exception raised when an extension is not found."
msgstr "プライベートメッセージコンテキストで、要求された処理が実行できない場合に発生する例外。"

#: hcord.ext.commands.ExtensionNotFound:5 of
msgid "Made the ``original`` attribute always None."
msgstr ""

#: hcord.ext.commands.ExtensionNotFound:16 of
msgid "Always ``None`` for backwards compatibility."
msgstr ""

#: hcord.ext.commands.ExtensionNotFound:18 of
msgid ":class:`NoneType`"
msgstr ""

#: hcord.ext.commands.CommandRegistrationError:1 of
msgid ""
"An exception raised when the command can't be added because the name is "
"already taken by a different command."
msgstr ""

#: hcord.ext.commands.CommandRegistrationError:4 of
#, fuzzy
msgid "This inherits from :exc:`hcord.ClientException`"
msgstr "これは :exc:`hcord.DiscordException` を継承しています。"

#: hcord.ext.commands.CommandRegistrationError:10 of
msgid "The command name that had the error."
msgstr ""

#: hcord.ext.commands.CommandRegistrationError:16 of
msgid "Whether the name that conflicts is an alias of the command we try to add."
msgstr ""

#: ../../ext/commands/api.rst:412
msgid "Exception Hierarchy"
msgstr ""

#: ../../ext/commands/api.rst:460
msgid ":exc:`~.DiscordException`"
msgstr ""

#: ../../ext/commands/api.rst:454
msgid ":exc:`~.commands.CommandError`"
msgstr ""

#: ../../ext/commands/api.rst:418
msgid ":exc:`~.commands.ConversionError`"
msgstr ""

#: ../../ext/commands/api.rst:437
msgid ":exc:`~.commands.UserInputError`"
msgstr ""

#: ../../ext/commands/api.rst:420
msgid ":exc:`~.commands.MissingRequiredArgument`"
msgstr ""

#: ../../ext/commands/api.rst:421
msgid ":exc:`~.commands.TooManyArguments`"
msgstr ""

#: ../../ext/commands/api.rst:432
msgid ":exc:`~.commands.BadArgument`"
msgstr ""

#: ../../ext/commands/api.rst:423
msgid ":exc:`~.commands.MessageNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:424
msgid ":exc:`~.commands.MemberNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:425
msgid ":exc:`~.commands.UserNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:426
msgid ":exc:`~.commands.ChannelNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:427
msgid ":exc:`~.commands.ChannelNotReadable`"
msgstr ""

#: ../../ext/commands/api.rst:428
msgid ":exc:`~.commands.BadColourArgument`"
msgstr ""

#: ../../ext/commands/api.rst:429
msgid ":exc:`~.commands.RoleNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:430
msgid ":exc:`~.commands.BadInviteArgument`"
msgstr ""

#: ../../ext/commands/api.rst:431
msgid ":exc:`~.commands.EmojiNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:432
msgid ":exc:`~.commands.PartialEmojiConversionFailure`"
msgstr ""

#: ../../ext/commands/api.rst:433
msgid ":exc:`~.commands.BadBoolArgument`"
msgstr ""

#: ../../ext/commands/api.rst:434
msgid ":exc:`~.commands.BadUnionArgument`"
msgstr ""

#: ../../ext/commands/api.rst:437
msgid ":exc:`~.commands.ArgumentParsingError`"
msgstr ""

#: ../../ext/commands/api.rst:436
msgid ":exc:`~.commands.UnexpectedQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:437
msgid ":exc:`~.commands.InvalidEndOfQuotedStringError`"
msgstr ""

#: ../../ext/commands/api.rst:438
msgid ":exc:`~.commands.ExpectedClosingQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:439
msgid ":exc:`~.commands.CommandNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:450
msgid ":exc:`~.commands.CheckFailure`"
msgstr ""

#: ../../ext/commands/api.rst:441
msgid ":exc:`~.commands.CheckAnyFailure`"
msgstr ""

#: ../../ext/commands/api.rst:442
msgid ":exc:`~.commands.PrivateMessageOnly`"
msgstr ""

#: ../../ext/commands/api.rst:443
msgid ":exc:`~.commands.NoPrivateMessage`"
msgstr ""

#: ../../ext/commands/api.rst:444
msgid ":exc:`~.commands.NotOwner`"
msgstr ""

#: ../../ext/commands/api.rst:445
msgid ":exc:`~.commands.MissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:446
msgid ":exc:`~.commands.BotMissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:447
msgid ":exc:`~.commands.MissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:448
msgid ":exc:`~.commands.BotMissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:449
msgid ":exc:`~.commands.MissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:450
msgid ":exc:`~.commands.BotMissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:451
msgid ":exc:`~.commands.NSFWChannelRequired`"
msgstr ""

#: ../../ext/commands/api.rst:452
msgid ":exc:`~.commands.DisabledCommand`"
msgstr ""

#: ../../ext/commands/api.rst:453
msgid ":exc:`~.commands.CommandInvokeError`"
msgstr ""

#: ../../ext/commands/api.rst:454
msgid ":exc:`~.commands.CommandOnCooldown`"
msgstr ""

#: ../../ext/commands/api.rst:455
msgid ":exc:`~.commands.MaxConcurrencyReached`"
msgstr ""

#: ../../ext/commands/api.rst:460
msgid ":exc:`~.commands.ExtensionError`"
msgstr ""

#: ../../ext/commands/api.rst:457
msgid ":exc:`~.commands.ExtensionAlreadyLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:458
msgid ":exc:`~.commands.ExtensionNotLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:459
msgid ":exc:`~.commands.NoEntryPointError`"
msgstr ""

#: ../../ext/commands/api.rst:460
msgid ":exc:`~.commands.ExtensionFailed`"
msgstr ""

#: ../../ext/commands/api.rst:461
msgid ":exc:`~.commands.ExtensionNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:462
msgid ":exc:`~.ClientException`"
msgstr ""

#: ../../ext/commands/api.rst:463
msgid ":exc:`~.commands.CommandRegistrationError`"
msgstr ""

#~ msgid ""
#~ ":class:`bool` -- Whether the commands "
#~ "should be case insensitive. Defaults to"
#~ " ``False``. This attribute does not "
#~ "carry over to groups. You must set"
#~ " it to every group if you "
#~ "require group commands to be case "
#~ "insensitive as well."
#~ msgstr ""
#~ ":class:`bool` -- コマンドを大文字と小文字を区別するかどうか。デフォルトでは "
#~ "``False`` "
#~ "です。この属性はグループコマンドには影響されません。もしグループコマンドでも大文字と小文字の区別が必要な場合、すべてのグループでの設定が必要になります。"

#~ msgid ""
#~ "Optional[Union[:class:`.Activity`, :class:`.Game`, "
#~ ":class:`.Streaming`]] -- The activity being"
#~ " used upon logging in."
#~ msgstr ""
#~ "Optional[Union[:class:`.Activity`, :class:`.Game`, "
#~ ":class:`.Streaming`]] -- ログイン時のアクティビティ。"

#~ msgid ":exc:`.ClientException` -- If the command is already registered."
#~ msgstr ":exc:`.ClientException` -- コマンドがすでに登録されている。"

#~ msgid ""
#~ "The activity parameter is a "
#~ ":class:`.Activity` object (not a string) "
#~ "that represents the activity being done"
#~ " currently. This could also be the"
#~ " slimmed down versions, :class:`.Game` and"
#~ " :class:`.Streaming`."
#~ msgstr ""
#~ "activityパラメータは、現在のアクティビティを示す :class:`.Activity` "
#~ "オブジェクトです(これはstringではありません)。スリム化された :class:`.Game` や "
#~ ":class:`.Streaming` でも可能です。"

#~ msgid ""
#~ ":exc:`.InvalidArgument` -- Invalid icon image"
#~ " format given. Must be PNG or "
#~ "JPG."
#~ msgstr ""

#~ msgid ""
#~ "Mapping[:class:`str`, :class:`py:types.ModuleType`] -- "
#~ "A read-only mapping of extension "
#~ "name to extension."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`.InvalidData` -- An unknown channel "
#~ "type was received from hcord."
#~ msgstr ""

#~ msgid ":exc:`.NotFound` -- Invalid Channel ID."
#~ msgstr ":exc:`.NotFound` -- チャンネルのIDが無効。"

#~ msgid ""
#~ "If the invite is for a guild "
#~ "you have not joined, the guild and"
#~ " channel attributes of the returned "
#~ ":class:`.Invite` will be "
#~ ":class:`.PartialInviteGuild` and "
#~ ":class:`PartialInviteChannel` respectively."
#~ msgstr ""

#~ msgid ":exc:`.NotFound` -- The invite has expired or is invalid."
#~ msgstr ""

#~ msgid ":exc:`.HTTPException` -- Getting the invite failed."
#~ msgstr ""

#~ msgid ":exc:`.NotFound` -- A user with this ID does not exist."
#~ msgstr ""

#~ msgid ":exc:`.HTTPException` -- Fetching the user failed."
#~ msgstr ""

#~ msgid ""
#~ "Gets an arbitrary user's profile. This"
#~ " can only be used by non-bot"
#~ " accounts."
#~ msgstr ""

#~ msgid ":exc:`.Forbidden` -- Not allowed to fetch profiles."
#~ msgstr ""

#~ msgid ":exc:`.HTTPException` -- Fetching the profile failed."
#~ msgstr ""

#~ msgid ":exc:`.HTTPException` -- Retrieving the webhook failed."
#~ msgstr ""

#~ msgid ":exc:`.NotFound` -- Invalid webhook ID."
#~ msgstr ""

#~ msgid ":exc:`.Forbidden` -- You do not have permission to fetch this webhook."
#~ msgstr ""

#~ msgid ":exc:`.Forbidden` -- The widget for this guild is disabled."
#~ msgstr ""

#~ msgid ":exc:`.HTTPException` -- Retrieving the widget failed."
#~ msgstr ""

#~ msgid ""
#~ "Optional[Union[:class:`.abc.GuildChannel`, :class:`.Thread`, "
#~ ":class:`.abc.PrivateChannel`]]: Returns a channel"
#~ " with the given ID."
#~ msgstr ""

#~ msgid "If not found, returns ``None``."
#~ msgstr ""

#~ msgid ""
#~ "Get a :class:`.Command` or subclasses "
#~ "from the internal list of commands."
#~ msgstr ""

#~ msgid "Optional[:class:`.Emoji`]: Returns an emoji with the given ID."
#~ msgstr ""

#~ msgid "Optional[:class:`.Guild`]: Returns a guild with the given ID."
#~ msgstr ""

#~ msgid "Optional[:class:`~hcord.User`]: Returns a user with the given ID."
#~ msgstr ""

#~ msgid ""
#~ "List[:class:`.Guild`] -- The guilds that "
#~ "the connected client is a member "
#~ "of."
#~ msgstr ""

#~ msgid "Indicates if the websocket connection is closed."
#~ msgstr ""

#~ msgid "Specifies if the client's internal cache is ready for use."
#~ msgstr ""

#~ msgid ""
#~ ":class:`float` -- Measures latency between "
#~ "a HEARTBEAT and a HEARTBEAT_ACK in "
#~ "seconds."
#~ msgstr ""

#~ msgid ":exc:`ExtensionNotFound` -- The extension could not be imported."
#~ msgstr ""

#~ msgid ":exc:`ExtensionAlreadyLoaded` -- The extension is already loaded."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`NoEntryPointError` -- The extension does"
#~ " not have a setup function."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`ExtensionFailed` -- The extension setup"
#~ " function had an execution error."
#~ msgstr ""

#~ msgid ""
#~ "Logging on with a user token is"
#~ " against the Discord `Terms of "
#~ "Service <https://support.discordapp.com/hc/en-"
#~ "us/articles/115002192352>`_ and doing so might"
#~ " potentially get your account banned. "
#~ "Use this at your own risk."
#~ msgstr ""

#~ msgid ":exc:`.LoginFailure` -- The wrong credentials are passed."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`.HTTPException` -- An unknown HTTP "
#~ "related error occurred, usually when it"
#~ " isn't 200 or the known incorrect "
#~ "credentials passing status code."
#~ msgstr ""

#~ msgid ""
#~ "List[:class:`.abc.PrivateChannel`] -- The private"
#~ " channels that the connected client "
#~ "is participating on."
#~ msgstr ""

#~ msgid ":exc:`ExtensionNotLoaded` -- The extension was not loaded."
#~ msgstr ""

#~ msgid ""
#~ "Remove a :class:`.Command` or subclasses "
#~ "from the internal list of commands."
#~ msgstr ""

#~ msgid ""
#~ "The command that was removed. If "
#~ "the name is not valid then `None`"
#~ " is returned instead."
#~ msgstr ""

#~ msgid ":class:`.Command` or subclass"
#~ msgstr ""

#~ msgid ""
#~ ":exc:`.InvalidArgument` -- If any guild "
#~ "is unavailable or not large in the"
#~ " collection."
#~ msgstr ""

#~ msgid ":exc:`TypeError` -- An unexpected keyword argument was received."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`.ClientUser`] -- Represents the "
#~ "connected client. None if not logged "
#~ "in."
#~ msgstr ""

#~ msgid ""
#~ "List[:class:`~hcord.User`] -- Returns a list"
#~ " of all the users the bot can"
#~ " see."
#~ msgstr ""

#~ msgid "List[:class:`.VoiceClient`] -- Represents a list of voice connections."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`asyncio.TimeoutError` -- If a timeout"
#~ " is provided and it was reached."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`TypeError` -- If the function is"
#~ " not a coroutine or is already "
#~ "a command."
#~ msgstr ""

#~ msgid ":class:`str` -- The name of the command."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`coroutine <coroutine>` -- The coroutine"
#~ " that is executed when the command"
#~ " is called."
#~ msgstr ""

#~ msgid ":class:`str` -- The long help text for the command."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The short help text "
#~ "for the command. If this is not"
#~ " specified then the first line of "
#~ "the long help text is used "
#~ "instead."
#~ msgstr ""

#~ msgid ":class:`str` -- A replacement for arguments in the default help text."
#~ msgstr ""

#~ msgid ":class:`list` -- The list of aliases the command can be invoked under."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- A boolean that "
#~ "indicates if the command is currently"
#~ " enabled. If the command is invoked"
#~ " while it is disabled, then "
#~ ":exc:`.DisabledCommand` is raised to the "
#~ ":func:`.on_command_error` event. Defaults to "
#~ "``True``."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`Command`] -- The parent "
#~ "command that this command belongs to."
#~ " ``None`` if there isn't one."
#~ msgstr ""

#~ msgid ""
#~ "List[Callable[..., :class:`bool`]] -- A list"
#~ " of predicates that verifies if the"
#~ " command could be executed with the"
#~ " given :class:`.Context` as the sole "
#~ "parameter. If an exception is necessary"
#~ " to be thrown to signal failure, "
#~ "then one inherited from :exc:`.CommandError`"
#~ " should be used. Note that if "
#~ "the checks fail then :exc:`.CheckFailure` "
#~ "exception is raised to the "
#~ ":func:`.on_command_error` event."
#~ msgstr ""

#~ msgid ":class:`str` -- The message prefixed into the default help command."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- If ``True``\\, the "
#~ "default help command does not show "
#~ "this in the help output."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- If ``False`` and a "
#~ "keyword-only argument is provided then"
#~ " the keyword only argument is "
#~ "stripped and handled as if it was"
#~ " a regular argument that handles "
#~ ":exc:`.MissingRequiredArgument` and default values"
#~ " in a regular matter rather than "
#~ "passing the rest completely raw. If "
#~ "``True`` then the keyword-only argument"
#~ " will pass in the rest of the"
#~ " arguments in a completely raw "
#~ "matter. Defaults to ``False``."
#~ msgstr ""

#~ msgid "Optional[:class:`Command`] -- The subcommand that was invoked, if any."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- If ``True``\\, ignores "
#~ "extraneous strings passed to a command"
#~ " if all its requirements are met "
#~ "(e.g. ``?foo a b c`` when only "
#~ "expecting ``a`` and ``b``). Otherwise "
#~ ":func:`.on_command_error` and local error "
#~ "handlers are called with "
#~ ":exc:`.TooManyArguments`. Defaults to ``True``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- If ``True``\\, cooldown "
#~ "processing is done after argument "
#~ "parsing, which calls converters. If "
#~ "``False`` then cooldown processing is "
#~ "done first and then the converters "
#~ "are called second. Defaults to "
#~ "``False``."
#~ msgstr ""

#~ msgid ""
#~ "Retrieves the parameter OrderedDict without"
#~ " the context or self parameters."
#~ msgstr ""

#~ msgid ":class:`str` -- Retrieves the fully qualified parent command name."
#~ msgstr ""

#~ msgid ":class:`Command` -- Retrieves the parents of this command."
#~ msgstr ""

#~ msgid ":class:`str` -- Retrieves the fully qualified command name."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The name of the "
#~ "cog this command belongs to. None "
#~ "otherwise."
#~ msgstr ""

#~ msgid ":class:`str` -- Gets the \"short\" documentation of a command."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- Returns a POSIX-like "
#~ "signature useful for help command "
#~ "output."
#~ msgstr ""

#~ msgid ""
#~ "Checks if the command can be "
#~ "executed by checking all the predicates"
#~ " inside the :attr:`.checks` attribute."
#~ msgstr ""

#~ msgid ""
#~ ":class:`CommandError` -- Any command error "
#~ "that was raised during a check "
#~ "call will be propagated by this "
#~ "function."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`bool`] -- Indicates if the"
#~ " group callback should begin parsing "
#~ "and invocation only if no subcommand "
#~ "was found. Useful for making it an"
#~ " error handling function to tell the"
#~ " user that no subcommand was found"
#~ " or to have different functionality "
#~ "in case no subcommand was found. "
#~ "If this is ``False``, then the "
#~ "group callback will always be invoked"
#~ " first. This means that the checks"
#~ " and the parsing dictated by its "
#~ "parameters will be executed. Defaults to"
#~ " ``False``."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`bool`] -- Indicates if the"
#~ " group's commands should be case "
#~ "insensitive. Defaults to ``False``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`dict` -- A mapping of command"
#~ " name to :class:`.Command` or subclass "
#~ "objects."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- Whether the commands "
#~ "should be case insensitive. Defaults to"
#~ " ``False``."
#~ msgstr ""

#~ msgid ""
#~ "Returns a :class:`list` of "
#~ ":class:`.Command`\\s that are defined inside"
#~ " this cog."
#~ msgstr ""

#~ msgid ":class:`str` -- Returns the cog's specified name, not the class name."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- Returns the cog's "
#~ "description, typically the cleaned docstring."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`TypeError` -- The function is not"
#~ " a coroutine function or a string "
#~ "was not passed as the name."
#~ msgstr ""

#~ msgid "This function **can** be a coroutine."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The cog name. By "
#~ "default, it is the name of the "
#~ "class with no modification."
#~ msgstr ""

#~ msgid ""
#~ ":class:`dict` -- A list of attributes"
#~ " to apply to every command inside "
#~ "this cog. The dictionary is passed "
#~ "into the :class:`Command` (or its "
#~ "subclass) options at ``__init__``. If "
#~ "you specify attributes inside the "
#~ "command attribute in the class, it "
#~ "will override the one specified inside"
#~ " this attribute. For example:"
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`Context`] -- The context that"
#~ " invoked this help formatter. This is"
#~ " generally set after the help command"
#~ " assigned, :func:`command_callback`\\, has been"
#~ " called."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- Specifies if hidden "
#~ "commands should be shown in the "
#~ "output. Defaults to ``False``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- Specifies if commands "
#~ "should have their :attr:`.Command.checks` "
#~ "called and verified. Defaults to "
#~ "``True``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`dict` -- A dictionary of options"
#~ " to pass in for the construction "
#~ "of the help command. This allows "
#~ "you to change the command behaviour "
#~ "without actually changing the implementation"
#~ " of the command. The attributes will"
#~ " be the same as the ones passed"
#~ " in the :class:`.Command` constructor."
#~ msgstr ""

#~ msgid ""
#~ ":class:`int` -- The maximum number of"
#~ " characters that fit in a line. "
#~ "Defaults to 80."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- Whether to sort the "
#~ "commands in the output alphabetically. "
#~ "Defaults to ``True``."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`bool`] -- A tribool that "
#~ "indicates if the help command should "
#~ "DM the user instead of sending it"
#~ " to the channel it received it "
#~ "from. If the boolean is set to "
#~ "``True``, then all help output is "
#~ "DM'd. If ``False``, none of the "
#~ "help output is DM'd. If ``None``, "
#~ "then the bot will only DM when "
#~ "the help message becomes too long "
#~ "(dictated by more than "
#~ ":attr:`dm_help_threshold` characters). Defaults to"
#~ " ``False``."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`int`] -- The number of "
#~ "characters the paginator must accumulate "
#~ "before getting DM'd to the user if"
#~ " :attr:`dm_help` is set to ``None``. "
#~ "Defaults to 1000."
#~ msgstr ""

#~ msgid ""
#~ ":class:`int` -- How much to intend "
#~ "the commands from a heading. Defaults"
#~ " to ``2``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The command list's "
#~ "heading string used when the help "
#~ "command is invoked with a category "
#~ "name. Useful for i18n. Defaults to "
#~ "``\"Commands:\"``"
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The string used when "
#~ "there is a command which does not"
#~ " belong to any category(cog). Useful "
#~ "for i18n. Defaults to ``\"No "
#~ "Category\"``"
#~ msgstr ""

#~ msgid ""
#~ ":class:`Paginator` -- The paginator used "
#~ "to paginate the help command output."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The command list's "
#~ "heading string used when the help "
#~ "command is invoked with a category "
#~ "name. Useful for i18n. Defaults to "
#~ "``\"Commands\"``"
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The alias list's heading"
#~ " string used to list the aliases "
#~ "of the command. Useful for i18n. "
#~ "Defaults to ``\"Aliases:\"``."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`str`] -- The prefix inserted"
#~ " to every page. e.g. three backticks."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`str`] -- The suffix appended"
#~ " at the end of every page. e.g."
#~ " three backticks."
#~ msgstr ""

#~ msgid ":class:`int` -- The maximum amount of codepoints allowed in a page."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`RuntimeError` -- The line was too"
#~ " big for the current :attr:`max_size`."
#~ msgstr ""

#~ msgid "These functions can either be regular functions or coroutines."
#~ msgstr ""

#~ msgid ""
#~ "A decorator that adds a cooldown "
#~ "to a :class:`.Command` or its "
#~ "subclasses."
#~ msgstr ""

#~ msgid ""
#~ "A cooldown allows a command to "
#~ "only be used a specific amount of"
#~ " times in a specific time frame. "
#~ "These cooldowns can be based either "
#~ "on a per-guild, per-channel, "
#~ "per-user, or global basis. Denoted by"
#~ " the third argument of ``type`` which"
#~ " must be of enum type ``BucketType``"
#~ " which could be either:"
#~ msgstr ""

#~ msgid "``BucketType.default`` for a global basis."
#~ msgstr ""

#~ msgid "``BucketType.user`` for a per-user basis."
#~ msgstr ""

#~ msgid "``BucketType.guild`` for a per-guild basis."
#~ msgstr ""

#~ msgid "``BucketType.channel`` for a per-channel basis."
#~ msgstr ""

#~ msgid "``BucketType.member`` for a per-member basis."
#~ msgstr ""

#~ msgid "``BucketType.category`` for a per-category basis."
#~ msgstr ""

#~ msgid ""
#~ ":class:`.Message` -- The message that "
#~ "triggered the command being executed."
#~ msgstr ""

#~ msgid ":class:`.Bot` -- The bot that contains the command being executed."
#~ msgstr ""

#~ msgid ""
#~ ":class:`list` -- The list of transformed"
#~ " arguments that were passed into the"
#~ " command. If this is accessed during"
#~ " the :func:`on_command_error` event then "
#~ "this list could be incomplete."
#~ msgstr ""

#~ msgid ""
#~ ":class:`dict` -- A dictionary of "
#~ "transformed arguments that were passed "
#~ "into the command. Similar to "
#~ ":attr:`args`\\, if this is accessed in"
#~ " the :func:`on_command_error` event then "
#~ "this dict could be incomplete."
#~ msgstr ""

#~ msgid ":class:`str` -- The prefix that was used to invoke the command."
#~ msgstr ""

#~ msgid ""
#~ "The command (i.e. :class:`.Command` or "
#~ "its subclasses) that is being invoked"
#~ " currently."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The command name that"
#~ " triggered this invocation. Useful for "
#~ "finding out which alias called the "
#~ "command."
#~ msgstr ""

#~ msgid ""
#~ "The subcommand (i.e. :class:`.Command` or "
#~ "its subclasses) that was invoked. If "
#~ "no valid subcommand was invoked then "
#~ "this is equal to ``None``."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`str`] -- The string that "
#~ "was attempted to call a subcommand. "
#~ "This does not have to point to "
#~ "a valid registered subcommand and could"
#~ " just point to a nonsense string. "
#~ "If nothing was passed to attempt a"
#~ " call to a subcommand then this "
#~ "is set to ``None``."
#~ msgstr ""

#~ msgid ""
#~ ":class:`bool` -- A boolean that "
#~ "indicates if the command failed to "
#~ "be parsed, checked, or invoked."
#~ msgstr ""

#~ msgid ""
#~ "You must have "
#~ ":attr:`~.Permissions.read_message_history` permissions to"
#~ " use this."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`~hcord.Forbidden` -- You do not "
#~ "have permissions to get channel message"
#~ " history."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`~hcord.HTTPException` -- The request "
#~ "to get message history failed."
#~ msgstr ""

#~ msgid ""
#~ "Returns the channel associated with this"
#~ " context's command. Shorthand for "
#~ ":attr:`.Message.channel`."
#~ msgstr ""

#~ msgid ""
#~ "Returns the author associated with this"
#~ " context's command. Shorthand for "
#~ ":attr:`.Message.author`"
#~ msgstr ""

#~ msgid ":exc:`~hcord.NotFound` -- The specified message was not found."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`~hcord.Forbidden` -- You do not "
#~ "have the permissions required to get "
#~ "a message."
#~ msgstr ""

#~ msgid ":exc:`~hcord.HTTPException` -- Retrieving the message failed."
#~ msgstr ""

#~ msgid "A command or subclass of a command that is going to be called."
#~ msgstr ""

#~ msgid ":exc:`~hcord.HTTPException` -- Retrieving the pinned messages failed."
#~ msgstr ""

#~ msgid ":exc:`~hcord.HTTPException` -- Sending the message failed."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`~hcord.Forbidden` -- You do not "
#~ "have the proper permissions to send "
#~ "the message."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`~hcord.InvalidArgument` -- The ``files`` "
#~ "list is not of the appropriate "
#~ "size or you specified both ``file`` "
#~ "and ``files``."
#~ msgstr ""

#~ msgid ""
#~ "Similar to :attr:`.Guild.me` except it "
#~ "may return the :class:`.ClientUser` in "
#~ "private message contexts."
#~ msgstr ""

#~ msgid ""
#~ "Optional[:class:`.VoiceClient`] -- A shortcut "
#~ "to :attr:`.Guild.voice_client`\\, if applicable."
#~ msgstr ""

#~ msgid ":class:`bool` -- Whether to clean channel mentions."
#~ msgstr ""

#~ msgid ":class:`bool` -- Whether to use nicknames when transforming mentions."
#~ msgstr ""

#~ msgid ":class:`bool` -- Whether to also escape special markdown characters."
#~ msgstr ""

#~ msgid ":class:`hcord.ext.commands.Converter` -- The converter that failed."
#~ msgstr ""

#~ msgid ":class:`inspect.Parameter` -- The argument that is missing."
#~ msgstr ""

#~ msgid ""
#~ ":class:`str` -- The quote mark that "
#~ "was found inside the non-quoted "
#~ "string."
#~ msgstr ""

#~ msgid ":class:`str` -- The character found instead of the expected string."
#~ msgstr ""

#~ msgid ":class:`str` -- The quote character expected."
#~ msgstr ""

#~ msgid ""
#~ ":class:`inspect.Parameter` -- The parameter "
#~ "that failed being converted."
#~ msgstr ""

#~ msgid ""
#~ "*Tuple[Type, ...]* -- A tuple of "
#~ "converters attempted in conversion, in "
#~ "order of failure."
#~ msgstr ""

#~ msgid ""
#~ "List[:class:`CommandError`] -- A list of "
#~ "errors that were caught from failing "
#~ "the conversion."
#~ msgstr ""

#~ msgid ""
#~ "*Cooldown* -- A class with attributes"
#~ " ``rate``, ``per``, and ``type`` similar"
#~ " to the :func:`.cooldown` decorator."
#~ msgstr ""

#~ msgid ""
#~ ":class:`float` -- The amount of seconds"
#~ " to wait before you can retry "
#~ "again."
#~ msgstr ""

#~ msgid ":class:`list` -- The required permissions that are missing."
#~ msgstr ""

#~ msgid ""
#~ "Union[:class:`str`, :class:`int`] -- The "
#~ "required role that is missing. This "
#~ "is the parameter passed to "
#~ ":func:`~.commands.has_role`."
#~ msgstr ""

#~ msgid ""
#~ "List[Union[:class:`str`, :class:`int`]] -- The "
#~ "roles that the invoker is missing. "
#~ "These are the parameters passed to "
#~ ":func:`~.commands.has_any_role`."
#~ msgstr ""

#~ msgid ""
#~ "List[Union[:class:`str`, :class:`int`]] -- The "
#~ "roles that the bot's member is "
#~ "missing. These are the parameters passed"
#~ " to :func:`~.commands.has_any_role`."
#~ msgstr ""

#~ msgid ":class:`str` -- The extension that had an error."
#~ msgstr ""

#~ msgid ""
#~ "An exception raised when an extension"
#~ " failed to load during execution of"
#~ " the ``setup`` entry point."
#~ msgstr ""

#~ msgid ":class:`str` -- The extension that had the error."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`Exception` -- The original exception "
#~ "that was raised. You can also get"
#~ " this via the ``__cause__`` attribute."
#~ msgstr ""

#~ msgid "An exception raised when an extension failed to be imported."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`ImportError` -- The original exception"
#~ " that was raised. You can also "
#~ "get this via the ``__cause__`` "
#~ "attribute."
#~ msgstr ""

